var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,2.035,1,2.035]],["body/controllers/AppController.html",[0,3.345,1,3.345,2,3.549,3,0.43,4,0.372,5,0.372,6,3.549,7,0.784,8,1.236,9,1.845,10,0.033,11,0.763,12,4.26,13,1.009,14,5.218,15,1.69,16,0.43,17,1.009,18,0.43,19,0.097,20,1.201,21,4.26,22,4.26,23,0.022,24,0.027,25,0.022]],["title/modules/AppModule.html",[26,1.062,27,2.035]],["body/modules/AppModule.html",[1,3.02,2,3.412,3,0.297,4,0.257,5,0.257,10,0.034,16,0.618,17,0.697,18,0.297,19,0.067,23,0.015,24,0.021,25,0.015,26,1.575,27,3.897,28,1.275,29,1.168,30,1.533,31,1.533,32,1.275,33,1.533,34,1.533,35,2.452,36,2.452,37,3.19,38,3.19,39,3.19,40,2.887,41,2.133,42,1.533,43,1.533,44,2.943,45,2.943,46,2.357,47,2.943,48,2.943,49,1.886,50,1.275,51,1.533,52,1.886,53,2.943,54,1.395,55,2.962,56,2.943,57,2.452,58,2.943,59,2.943,60,2.943,61,1.491,62,1.886,63,1.774,64,2.128,65,1.774,66,2.128,67,2.943,68,2.943,69,2.452,70,2.943,71,2.943,72,2.452,73,2.452,74,4.096,75,2.943,76,1.275,77,2.943]],["title/modules/AuthModule.html",[26,1.062,37,1.827]],["body/modules/AuthModule.html",[3,0.318,4,0.275,5,0.275,10,0.033,16,0.603,17,0.747,18,0.318,19,0.072,23,0.016,24,0.022,25,0.016,26,1.633,28,1.366,29,1.251,30,1.642,31,1.642,32,1.366,33,2.544,34,2.544,37,3.563,40,2.949,41,2.237,42,1.642,43,1.642,46,2.471,51,1.642,52,2.021,57,2.626,78,2.626,79,3.152,80,2.626,81,2.626,82,3.203,83,3.258,84,2.949,85,3.152,86,3.152,87,2.28,88,4.294,89,2.021,90,2.753,91,3.152,92,2.626,93,3.152,94,3.152,95,3.152,96,3.152,97,2.021,98,3.152,99,3.152,100,2.626,101,3.152,102,2.28,103,3.152]],["title/classes/AuthResolver.html",[19,0.073,90,2.035]],["body/classes/AuthResolver.html",[3,0.345,4,0.299,5,0.299,7,0.445,8,1.075,9,1.966,10,0.033,11,0.912,13,1.075,16,0.547,18,0.345,19,0.078,20,1.28,23,0.018,24,0.023,25,0.018,54,1.623,76,1.483,82,3.02,90,2.91,92,2.853,104,1.145,105,2.853,106,1.781,107,3.782,108,5.423,109,1.359,110,3.424,111,3.424,112,1.174,113,0.813,114,0.741,115,0.983,116,2.853,117,4.831,118,4.539,119,3.424,120,1.813,121,4.539,122,3.424,123,2.195,124,2.195,125,2.853,126,1.483,127,2.476,128,3.424,129,3.424,130,2.195,131,1.483,132,3.424,133,1.247,134,3.424]],["title/injectables/AuthService.html",[82,1.654,135,0.752]],["body/injectables/AuthService.html",[3,0.274,4,0.237,5,0.237,7,0.353,8,0.916,10,0.033,11,0.807,13,0.916,15,2.143,16,0.561,17,0.643,18,0.274,19,0.062,20,1.271,23,0.014,24,0.02,25,0.014,51,1.414,52,1.74,61,0.988,62,1.74,82,2.015,84,2.894,87,1.963,102,1.963,106,1.659,107,3.223,109,1.535,112,1.166,113,0.807,114,0.656,115,0.976,116,3.223,117,4.327,120,1.643,125,2.261,126,1.176,131,1.953,133,1.642,135,0.916,136,1.176,137,2.261,138,3.869,139,2.714,140,5.4,141,2.635,142,2.714,143,2.714,144,3.869,145,4.508,146,2.714,147,1.676,148,3.869,149,2.714,150,2.714,151,2.594,152,1.95,153,2.989,154,2.714,155,3.869,156,2.714,157,3.869,158,1.963,159,1.74,160,1.562,161,2.714,162,2.714,163,2.714,164,2.48,165,1.963,166,2.714,167,1.74,168,3.869,169,2.714,170,2.714,171,2.714,172,0.908]],["title/classes/EventEntity.html",[19,0.073,63,1.375]],["body/classes/EventEntity.html",[3,0.248,4,0.215,5,0.215,7,0.32,9,2.519,10,0.033,11,1.041,15,2.195,16,0.474,18,0.248,19,0.056,23,0.013,24,0.019,25,0.013,61,0.896,62,1.576,63,1.561,65,1.847,66,1.778,76,2.262,104,0.822,113,0.44,114,0.872,126,1.065,172,1.426,173,2.049,174,1.876,175,2.733,176,2.309,177,3.552,178,3.083,179,3.083,180,2.22,181,3.083,182,3.552,183,2.733,184,3.083,185,3.083,186,3.083,187,4.493,188,4.349,189,3.346,190,2.459,191,3.083,192,2.459,193,3.603,194,4.694,195,2.459,196,1.43,197,3.083,198,2.459,199,2.733,200,2.459,201,3.203,202,3.613,203,2.459,204,3.083,205,3.001,206,2.459,207,2.459,208,2.605,209,3.613,210,2.459,211,2.459,212,2.459,213,1.778,214,2.459,215,2.605,216,3.001,217,2.605,218,0.896,219,2.049,220,2.459]],["title/classes/EventResolver.html",[19,0.073,221,2.035]],["body/classes/EventResolver.html",[3,0.26,4,0.225,5,0.225,7,0.335,8,0.884,9,1.898,10,0.033,11,0.86,13,1.038,15,1.739,16,0.442,18,0.26,19,0.059,20,1.236,23,0.026,24,0.019,25,0.013,54,1.223,104,0.863,106,1.754,109,1.024,112,1.134,113,0.785,114,0.638,115,0.948,120,1.775,123,1.654,124,1.654,126,1.118,130,1.654,131,1.118,133,1.359,152,1.481,160,2.147,172,1.248,175,1.654,196,2.267,208,3.839,221,2.392,222,2.15,223,3.731,224,4.801,225,4.382,226,2.58,227,2.765,228,2.58,229,2.58,230,3.731,231,2.58,232,3.731,233,2.58,234,2.58,235,4.801,236,4.423,237,4.801,238,4.801,239,3.731,240,2.58,241,4.382,242,4.243,243,1.866,244,2.15,245,2.58,246,2.58,247,2.58,248,2.58,249,2.58,250,2.58,251,3.731,252,3.731,253,3.731,254,2.58,255,4.801,256,2.58,257,4.382,258,2.58,259,1.943,260,2.58,261,2.58,262,1.866,263,2.58,264,2.58]],["title/injectables/EventService.html",[135,0.752,227,1.654]],["body/injectables/EventService.html",[3,0.313,4,0.271,5,0.271,7,0.403,8,1.006,10,0.033,11,0.867,13,1.006,16,0.55,17,0.735,18,0.428,19,0.071,20,1.198,23,0.016,24,0.022,25,0.016,50,1.344,63,1.344,106,1.73,109,1.685,112,1.253,113,0.867,114,0.705,115,1.048,120,1.742,126,1.344,131,1.344,133,1.546,135,1.006,136,1.344,151,1.785,152,1.922,165,3.502,172,1.037,180,1.615,196,1.922,218,1.129,227,2.212,242,3.538,265,2.243,266,3.071,267,3.071,268,2.584,269,3.766,270,3.101,271,3.538,272,4.247,273,4.893,274,3.101,275,5.633,276,3.071,277,3.101,278,2.243,279,3.101,280,2.584,281,2.243,282,2.584,283,3.101,284,4.247,285,3.101,286,2.584]],["title/classes/Events1612265244438.html",[19,0.073,287,2.296]],["body/classes/Events1612265244438.html",[3,0.143,4,0.124,5,0.124,7,0.184,8,0.555,10,0.034,11,0.419,13,0.555,16,0.143,18,0.143,19,0.032,23,0.007,24,0.012,25,0.007,76,2.175,104,0.474,106,1.273,112,0.606,113,0.419,114,0.341,115,0.507,120,1.162,133,1.266,147,0.614,152,1.379,159,0.909,160,0.816,167,3.289,172,0.474,174,1.22,177,1.181,179,1.025,180,1.22,182,1.181,183,0.909,184,1.025,185,1.025,201,1.502,218,0.516,259,1.22,287,1.694,288,2.494,289,1.181,290,2.164,291,3.452,292,1.694,293,1.502,294,1.694,295,3.437,296,1.418,297,1.694,298,1.418,299,1.348,300,1.952,301,1.025,302,1.025,303,1.181,304,2.343,305,0.909,306,1.025,307,1.418,308,1.418,309,1.418,310,1.418,311,1.181,312,2.494,313,4.385,314,3.96,315,2.993,316,1.181,317,1.418,318,1.418,319,2.467,320,1.694,321,1.025,322,1.181,323,2.343,324,1.025,325,2.343,326,2.343,327,1.418,328,2.343,329,2.993,330,5.67,331,6.215,332,3.476,333,1.418,334,5.753,335,2.343,336,4.897,337,5.713,338,5.022,339,4.897,340,4.897,341,4.753,342,2.343,343,2.343,344,2.343,345,1.418,346,1.418,347,1.418,348,1.418,349,2.993,350,1.418,351,3.476,352,2.343,353,2.343,354,4.385,355,1.418,356,1.418,357,1.418,358,1.418,359,4.585,360,2.343,361,2.343,362,1.418,363,1.418,364,2.343,365,2.343,366,1.418,367,3.476,368,1.418,369,1.418,370,3.476,371,1.952,372,1.418,373,1.418,374,1.418,375,2.343,376,1.418,377,2.343,378,1.418,379,1.418,380,2.343,381,4.144,382,2.343,383,1.418,384,1.418,385,2.343,386,1.418,387,1.418,388,1.418,389,1.418,390,1.418,391,1.418,392,1.418,393,1.418,394,1.418,395,1.418,396,1.418,397,1.418,398,1.418,399,1.418,400,1.418,401,1.418,402,1.418,403,1.418,404,1.181,405,3.476,406,1.418,407,2.993,408,2.343,409,2.343,410,2.343,411,2.343,412,2.343,413,1.025,414,1.418,415,1.418]],["title/modules/EventsModule.html",[26,1.062,38,1.827]],["body/modules/EventsModule.html",[3,0.382,4,0.33,5,0.33,10,0.033,16,0.588,17,0.896,18,0.382,19,0.087,23,0.019,24,0.025,25,0.019,26,1.787,28,1.639,29,1.502,30,1.971,31,1.971,32,1.639,33,2.784,34,2.784,38,3.486,41,2.523,42,1.971,43,1.971,46,2.177,49,2.426,50,1.639,63,1.639,221,3.106,227,3.293,244,3.152,280,3.152,416,3.152,417,3.152,418,3.152,419,3.784,420,3.784,421,3.784]],["title/injectables/GqlAuthGuard.html",[135,0.752,422,2.035]],["body/injectables/GqlAuthGuard.html",[3,0.403,4,0.349,5,0.349,7,0.519,8,1.188,10,0.033,11,0.715,13,0.946,16,0.553,17,0.946,18,0.403,19,0.091,20,1.126,23,0.021,24,0.026,25,0.021,54,1.893,73,3.327,89,2.56,112,1.033,113,0.715,114,0.581,115,0.864,135,1.188,136,1.73,152,1.585,422,3.214,423,4.177,424,3.327,425,5.014,426,5.014,427,4.788,428,3.994,429,3.994,430,3.994,431,3.327,432,3.994,433,3.327,434,3.994,435,3.994]],["title/injectables/JwtStrategy.html",[83,1.827,135,0.752]],["body/injectables/JwtStrategy.html",[3,0.365,4,0.316,5,0.316,7,0.47,8,1.115,10,0.033,11,0.843,13,0.857,16,0.559,17,0.857,18,0.365,19,0.083,20,1.02,23,0.019,24,0.024,25,0.019,51,1.884,52,2.319,83,2.708,89,2.319,97,3.017,100,3.014,106,1.607,109,2.076,112,0.936,113,0.648,114,0.526,115,0.783,135,1.115,136,1.567,147,1.567,158,2.616,165,2.616,167,2.319,371,3.014,431,3.014,436,3.014,437,3.921,438,3.618,439,4.706,440,3.618,441,3.618,442,3.618,443,3.618,444,3.014,445,3.618,446,3.618,447,3.618,448,3.618,449,3.618,450,3.014,451,3.014,452,3.014,453,3.014,454,3.014,455,3.014,456,3.014,457,3.618,458,3.618]],["title/classes/MediaEntity.html",[19,0.073,65,1.375]],["body/classes/MediaEntity.html",[3,0.254,4,0.22,5,0.22,7,0.327,9,2.459,10,0.034,11,1.017,15,2.089,16,0.479,18,0.254,19,0.058,23,0.013,24,0.019,25,0.013,61,1.335,62,1.614,63,1.588,64,1.821,65,1.588,76,2.28,104,0.842,113,0.451,114,0.839,115,0.793,126,1.091,153,1.449,172,1.445,174,1.909,175,3.043,176,2.35,178,3.125,180,1.909,181,3.433,183,2.77,185,3.125,186,3.125,187,4.202,188,3.954,189,3.043,191,3.125,196,1.455,197,3.125,199,2.77,201,3.043,202,3.433,204,3.433,205,3.054,208,2.651,209,3.648,213,2.651,215,2.651,216,3.054,217,1.821,218,0.917,305,2.77,306,3.125,413,1.821,459,2.098,460,2.77,461,2.518,462,2.518,463,3.054,464,2.518,465,2.518,466,4.322,467,4.322,468,2.518,469,2.518,470,2.518,471,2.518,472,2.518,473,3.054,474,2.518,475,2.518]],["title/classes/MediaResolver.html",[19,0.073,476,2.035]],["body/classes/MediaResolver.html",[3,0.28,4,0.242,5,0.499,7,0.36,8,0.93,9,1.976,10,0.034,11,0.888,13,1.08,16,0.46,18,0.28,19,0.063,20,1.286,23,0.014,24,0.02,25,0.014,54,1.315,104,0.927,106,1.785,109,1.1,112,1.18,113,0.817,114,0.664,115,0.987,120,1.659,123,1.778,124,1.778,126,1.201,130,1.778,131,1.201,133,1.661,152,1.81,172,1.525,196,1.81,199,1.778,243,2.005,259,1.444,262,2.005,311,2.31,312,2.31,437,2.31,450,2.31,451,2.31,452,2.31,453,2.31,454,2.31,455,2.31,456,2.31,476,2.518,477,2.31,478,3.928,479,4.961,480,3.928,481,2.773,482,2.833,483,2.773,484,2.773,485,3.928,486,2.773,487,3.928,488,2.773,489,2.773,490,3.928,491,2.773,492,2.773,493,2.31,494,2.773,495,2.773,496,2.773,497,2.773,498,2.773,499,3.928,500,3.928,501,3.928,502,2.31,503,3.928,504,2.31,505,2.773,506,2.31,507,2.773,508,2.773,509,2.773,510,2.773,511,2.773,512,2.773]],["title/injectables/MediaService.html",[135,0.752,482,1.654]],["body/injectables/MediaService.html",[3,0.354,4,0.306,5,0.306,7,0.456,8,1.093,10,0.033,11,0.923,13,1.093,16,0.552,17,0.831,18,0.354,19,0.08,20,1.301,23,0.018,24,0.024,25,0.018,50,1.519,65,1.519,106,1.793,109,1.83,112,1.193,113,0.826,114,0.671,115,0.998,120,1.831,131,1.519,133,1.679,135,1.093,136,1.519,151,2.018,172,1.173,196,2.045,218,1.277,266,3.959,267,3.335,269,3.959,276,3.335,278,2.536,482,2.402,513,2.922,514,3.508,515,3.508,516,4.612,517,3.508,518,3.508,519,2.922,520,3.508,521,3.508,522,3.508]],["title/classes/Medias1612265095526.html",[19,0.073,523,2.296]],["body/classes/Medias1612265095526.html",[3,0.304,4,0.263,5,0.263,7,0.391,8,0.986,10,0.033,11,0.745,13,0.986,16,0.304,18,0.304,19,0.069,23,0.016,24,0.021,25,0.016,76,2.596,104,1.007,106,1.715,112,1.077,113,0.745,114,0.606,115,0.901,120,1.72,133,1.737,147,1.305,152,1.652,159,1.931,167,3.88,172,1.007,174,2.168,180,3.153,183,1.931,218,1.097,259,1.569,290,3.449,291,4.651,292,3.01,293,2.668,294,3.01,295,4.281,297,3.01,299,2.395,300,2.509,301,2.178,302,2.178,303,2.509,305,2.668,306,3.01,320,3.01,321,2.178,322,2.509,324,2.178,523,3.01,524,3.973,525,2.509,526,3.012,527,3.012,528,3.012,529,3.012,530,3.012,531,3.012,532,3.012,533,3.012,534,3.012,535,3.012,536,3.012,537,3.012]],["title/modules/MediasModule.html",[26,1.062,39,1.827]],["body/modules/MediasModule.html",[3,0.382,4,0.33,5,0.33,10,0.033,16,0.588,17,0.896,18,0.382,19,0.087,23,0.019,24,0.025,25,0.019,26,1.787,28,1.639,29,1.502,30,1.971,31,1.971,32,1.639,33,2.784,34,2.784,39,3.486,41,2.523,42,1.971,43,1.971,46,2.177,49,2.426,50,1.639,65,1.639,476,3.106,482,3.293,493,3.152,519,3.152,538,3.152,539,3.152,540,3.152,541,3.784,542,3.784,543,3.784]],["title/injectables/PasswordService.html",[84,1.654,135,0.752]],["body/injectables/PasswordService.html",[3,0.305,4,0.264,5,0.264,7,0.394,8,0.99,10,0.033,11,0.856,13,0.99,15,2.352,16,0.421,17,0.717,18,0.305,19,0.069,20,1.454,23,0.016,24,0.021,25,0.016,84,2.176,112,1.081,113,0.748,114,0.696,115,0.904,120,1.724,135,0.99,136,1.312,151,2.752,176,2.678,196,1.202,319,2.678,460,2.678,544,2.523,545,4.782,546,4.177,547,4.177,548,4.177,549,5.409,550,3.028,551,4.782,552,5.592,553,3.969,554,5.731,555,4.177,556,3.028,557,2.523,558,2.523,559,3.028,560,4.177,561,4.177,562,2.523,563,2.523,564,3.028,565,4.782,566,3.028,567,3.028,568,3.028]],["title/classes/UserEntity.html",[19,0.073,61,1.156]],["body/classes/UserEntity.html",[3,0.261,4,0.226,5,0.226,7,0.336,9,2.475,10,0.034,11,1.023,15,2.357,16,0.485,18,0.261,19,0.059,23,0.013,24,0.019,25,0.013,61,1.361,63,1.619,64,1.87,65,1.619,66,1.87,76,2.082,104,0.865,113,0.463,114,0.844,115,1.04,126,1.12,147,1.901,172,1.467,174,1.946,175,2.813,176,2.395,178,3.173,181,3.476,186,3.173,191,3.173,196,1.483,197,3.173,199,3.081,201,3.081,202,1.87,204,3.173,209,4.056,213,1.87,215,2.702,217,2.702,218,0.942,219,2.155,299,1.488,305,3.081,413,2.702,463,3.113,473,3.655,553,2.813,569,2.155,570,3.655,571,3.655,572,2.586,573,2.586,574,2.586,575,2.586,576,3.737,577,2.586,578,2.586,579,2.586,580,2.586,581,2.586,582,3.737,583,3.737,584,2.586,585,2.586,586,2.586,587,2.586]],["title/classes/UserResolver.html",[19,0.073,588,2.035]],["body/classes/UserResolver.html",[3,0.359,4,0.311,5,0.311,7,0.463,8,1.104,9,1.543,10,0.033,11,0.834,13,0.844,16,0.591,17,0.844,18,0.359,19,0.081,20,1.004,23,0.018,24,0.024,25,0.018,54,1.689,61,2.005,104,1.191,106,1.595,109,1.413,112,1.205,113,0.834,114,0.678,115,1.008,123,2.283,124,2.283,130,2.283,131,1.543,141,2.779,153,2.681,422,2.283,588,2.986,589,2.967,590,4.659,591,3.562,592,3.562,593,3.562,594,3.562,595,3.562,596,3.562,597,2.576,598,3.562,599,2.576,600,3.562,601,3.562,602,2.967,603,3.562,604,3.562,605,3.562,606,3.562,607,3.562]],["title/injectables/UserService.html",[135,0.752,141,1.505]],["body/injectables/UserService.html",[3,0.29,4,0.251,5,0.251,7,0.374,8,0.955,10,0.033,11,0.951,13,1.195,15,1.847,16,0.509,17,0.681,18,0.29,19,0.066,20,1.422,23,0.015,24,0.021,25,0.015,50,1.246,61,1.048,106,1.86,109,1.6,112,1.304,113,0.903,114,0.734,115,1.092,120,1.928,131,1.246,133,1.836,135,0.955,136,1.246,141,1.911,147,1.746,151,1.655,152,1.6,153,1.655,160,2.32,172,0.962,196,1.847,218,1.048,259,1.498,266,3.647,267,2.915,268,2.397,269,3.647,271,3.358,276,2.915,278,2.08,286,2.397,299,1.655,302,2.08,599,2.08,608,2.397,609,4.031,610,4.031,611,2.877,612,4.031,613,4.654,614,2.877,615,2.877,616,2.877,617,4.031,618,2.877,619,2.877,620,4.031,621,2.877,622,2.877,623,2.877,624,2.877]],["title/classes/Users1612206849026.html",[19,0.073,625,2.296]],["body/classes/Users1612206849026.html",[3,0.34,4,0.294,5,0.294,7,0.438,8,1.065,10,0.033,11,0.805,13,1.065,16,0.34,18,0.34,19,0.077,23,0.017,24,0.023,25,0.017,104,1.128,106,1.774,112,1.163,113,0.805,114,0.654,115,0.973,120,1.803,133,1.637,147,2.335,153,2.587,159,2.163,174,2.341,218,1.229,290,3.656,292,3.251,293,2.881,294,3.251,295,4.384,297,3.251,299,2.587,301,3.898,320,3.251,321,3.656,324,2.44,460,2.163,553,3.24,570,2.811,571,2.811,625,3.251,626,4.211,627,2.811,628,3.745,629,3.374,630,3.374,631,3.374,632,3.374,633,3.374]],["title/modules/UsersModule.html",[26,1.062,40,1.654]],["body/modules/UsersModule.html",[3,0.382,4,0.33,5,0.33,10,0.033,16,0.588,17,0.896,18,0.382,19,0.087,23,0.019,24,0.025,25,0.019,26,1.787,28,1.639,29,1.502,30,1.971,31,1.971,32,1.639,33,2.784,34,2.784,40,3.155,41,2.523,42,1.971,43,1.971,46,2.177,49,2.426,50,1.639,61,1.378,141,2.997,588,3.106,599,2.736,602,3.152,634,3.152,635,3.152,636,3.152,637,3.784,638,3.784,639,3.784]],["title/coverage.html",[640,3.595]],["body/coverage.html",[0,1.886,1,1.886,5,0.257,6,2.452,10,0.033,19,0.136,23,0.015,24,0.021,25,0.015,32,1.275,51,2.133,55,2.128,61,1.072,63,1.275,65,1.275,82,1.533,83,1.694,84,1.533,90,1.886,105,2.452,114,0.428,127,2.128,135,1.347,137,2.452,141,1.395,164,1.886,173,2.452,221,1.886,222,2.452,227,1.533,262,4.599,265,2.962,281,2.128,287,2.128,288,2.452,289,2.452,422,1.886,423,2.452,424,2.452,436,2.452,459,2.452,476,1.886,477,2.452,482,1.533,513,2.452,523,2.128,524,2.452,525,2.452,544,2.452,569,2.452,588,1.886,589,2.452,597,2.128,608,2.452,625,2.128,626,2.452,627,2.452,640,2.452,641,2.452,642,2.943,643,2.943,644,4.096,645,2.452,646,5.543,647,5.543,648,2.452,649,5.093,650,5.093,651,2.943,652,2.943,653,2.943,654,4.096,655,4.096,656,2.452,657,2.943,658,2.452,659,2.452,660,2.452,661,2.943,662,2.943,663,2.943,664,2.943,665,2.943,666,2.943,667,2.943]],["title/dependencies.html",[29,1.513,668,2.66]],["body/dependencies.html",[10,0.034,17,0.799,23,0.017,24,0.023,25,0.017,29,1.339,50,1.462,54,1.6,72,4.211,87,2.44,89,2.163,97,2.163,114,0.491,189,2.163,218,1.229,444,3.745,504,2.811,562,2.811,669,3.374,670,5.988,671,3.374,672,3.374,673,3.374,674,3.374,675,4.495,676,3.745,677,3.374,678,3.374,679,5.391,680,3.374,681,3.374,682,3.374,683,4.495,684,4.495,685,3.745,686,5.055,687,2.811,688,3.374,689,4.495,690,3.251,691,3.374,692,3.374,693,3.374,694,3.374,695,3.374,696,3.374,697,3.374,698,2.811,699,3.374,700,3.374,701,3.374,702,3.374,703,3.374,704,3.374,705,3.374,706,3.374,707,3.374,708,3.374,709,3.374,710,3.374,711,3.374,712,3.374,713,3.374]],["title/miscellaneous/functions.html",[714,1.705,715,3.177]],["body/miscellaneous/functions.html",[7,0.62,10,0.029,23,0.025,24,0.029,25,0.025,32,2.565,660,3.975,690,3.45,714,3.058,715,3.975,716,4.771,717,3.45,718,4.771,719,3.45,720,3.975]],["title/index.html",[7,0.346,720,2.216,721,2.66]],["body/index.html",[4,0.191,10,0.024,23,0.011,24,0.017,25,0.011,29,0.868,164,2.117,179,3.617,184,2.389,236,1.823,293,1.403,319,2.117,404,1.823,502,4.453,506,3.963,563,1.823,641,3.314,685,1.823,687,1.823,690,2.389,698,2.752,717,1.582,719,1.582,722,1.823,723,4.432,724,3.979,725,2.188,726,3.979,727,6,728,2.188,729,2.188,730,3.303,731,2.188,732,2.188,733,2.188,734,2.188,735,2.188,736,2.188,737,2.188,738,2.188,739,2.188,740,3.979,741,2.188,742,3.303,743,4.757,744,2.188,745,3.303,746,2.188,747,5.002,748,2.188,749,2.188,750,4.757,751,2.188,752,4.432,753,2.188,754,3.979,755,5.192,756,3.303,757,2.188,758,2.188,759,2.188,760,5.805,761,2.188,762,2.188,763,2.188,764,3.303,765,2.188,766,2.188,767,2.188,768,2.188,769,2.188,770,2.188,771,2.188,772,2.188,773,5.192,774,3.303,775,5.575,776,3.979,777,2.188,778,5.192,779,3.979,780,3.303,781,2.188,782,2.188,783,2.188,784,3.303,785,2.188,786,2.188,787,2.188,788,2.188,789,2.188,790,2.188,791,2.188,792,2.188,793,2.188,794,2.188,795,2.188,796,3.979,797,2.188,798,3.979,799,2.188,800,3.979,801,2.188,802,2.188,803,2.188,804,2.188,805,2.188,806,2.188,807,2.188,808,3.303,809,3.979,810,5.002,811,4.432,812,3.303,813,2.188,814,2.188,815,3.303,816,2.188,817,2.188,818,2.188,819,2.188,820,2.188,821,3.303,822,2.188,823,2.188,824,2.188,825,3.303,826,3.303,827,3.979,828,2.188,829,2.188,830,2.188,831,2.188,832,2.188,833,2.188,834,2.188,835,3.303,836,2.188,837,2.188,838,2.188,839,2.188,840,2.188,841,2.188,842,2.188,843,2.188,844,2.188,845,2.188,846,2.188,847,2.188,848,2.188,849,2.188,850,2.188,851,2.188,852,2.188,853,2.188,854,2.188,855,2.188]],["title/modules.html",[28,1.869]],["body/modules.html",[10,0.028,23,0.023,24,0.028,25,0.023,27,2.902,28,1.961,37,2.605,38,2.605,39,2.605,40,2.358,676,5.111,856,6.135,857,6.135,858,6.135]],["title/overview.html",[859,3.595]],["body/overview.html",[0,2.095,10,0.033,23,0.017,24,0.023,25,0.017,26,1.093,27,3.902,28,1.416,29,1.297,30,1.702,31,1.702,32,1.416,33,1.702,34,1.702,35,2.723,36,2.723,37,3.56,38,3.293,39,3.293,40,3.046,41,2.292,42,1.702,43,1.702,78,2.723,80,2.723,81,2.723,82,3.046,83,2.863,84,2.591,104,1.093,136,1.416,141,2.772,227,3.046,259,1.702,314,2.723,316,2.723,319,2.095,416,2.723,417,2.723,418,2.723,482,3.046,538,2.723,539,2.723,540,2.723,634,2.723,635,2.723,636,2.723,859,2.723]],["title/miscellaneous/variables.html",[714,1.705,860,3.177]],["body/miscellaneous/variables.html",[7,0.334,10,0.034,15,1.476,20,1.495,23,0.013,24,0.019,25,0.013,51,2.495,55,2.689,69,2.14,76,1.893,97,2.384,102,2.689,113,0.46,114,0.795,127,2.689,147,1.893,152,1.019,158,3.161,160,3.146,164,2.802,180,1.338,189,1.647,243,1.858,265,1.858,273,2.14,281,2.689,282,2.14,427,3.098,433,3.641,460,1.647,553,2.802,557,4.416,558,4.753,597,2.689,628,2.14,645,2.14,648,2.14,656,2.14,658,2.14,659,2.14,714,1.647,717,2.689,722,2.14,860,2.14,861,2.569,862,2.569,863,2.569,864,2.569,865,2.569,866,2.569,867,3.719,868,3.719,869,4.371,870,3.719,871,3.719,872,3.719,873,3.719,874,3.719,875,3.719,876,3.719,877,3.719,878,3.719,879,2.569,880,2.569,881,2.14,882,2.569,883,2.569,884,2.569,885,2.569,886,2.569,887,3.719,888,2.569,889,2.569,890,2.569,891,2.569,892,2.569,893,4.791,894,2.569,895,2.569,896,2.569,897,2.569,898,2.569,899,3.719,900,2.569,901,2.569,902,2.569,903,2.569,904,2.569,905,2.569,906,2.569,907,2.569,908,2.569,909,2.569,910,2.569,911,2.569,912,2.569,913,2.569]],["title/additional-documentation/backend-api.html",[719,1.655,881,1.907,914,2.289,915,2.289]],["body/additional-documentation/backend-api.html",[10,0.032,23,0.026,24,0.029,25,0.026]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/backend-api.html":{}}}],["0",{"_index":262,"title":{},"body":{"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"coverage.html":{}}}],["0.1.13",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["0.2.30",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["00:00:00.000000",{"_index":334,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["01",{"_index":382,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["03",{"_index":360,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["04",{"_index":361,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["07",{"_index":332,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["08",{"_index":359,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["09",{"_index":381,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["1",{"_index":259,"title":{},"body":{"classes/EventResolver.html":{},"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{},"classes/Medias1612265095526.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["1.webp",{"_index":528,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["1/1",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":319,"title":{},"body":{"classes/Events1612265244438.html":{},"injectables/PasswordService.html":{},"index.html":{},"overview.html":{}}}],["10.jpg",{"_index":537,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["100",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["11.2.6",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["123456",{"_index":628,"title":{},"body":{"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["13",{"_index":333,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["14",{"_index":335,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["15",{"_index":390,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["15.5.0",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["15000000",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19",{"_index":394,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["2",{"_index":311,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{}}}],["2.0.0",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["2.19.2",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["2.jpg",{"_index":529,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["2013",{"_index":365,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["2019",{"_index":331,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["2019.\",\"ru",{"_index":406,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["21",{"_index":395,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["24",{"_index":349,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["25",{"_index":375,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["26",{"_index":352,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["27",{"_index":353,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["2b$10$a4x21zzo7iku59scznozee7ndo1mxcdxkaz8h3oti65d7qrpdatto",{"_index":633,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["3",{"_index":312,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{}}}],["3.0.0",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["3.4.0",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["3.webp",{"_index":530,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["3/4",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":380,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["33",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":313,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["4.0.0",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["4.webp",{"_index":531,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["5",{"_index":314,"title":{},"body":{"classes/Events1612265244438.html":{},"overview.html":{}}}],["5.0.0",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["5.webp",{"_index":532,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["50",{"_index":582,"title":{},"body":{"classes/UserEntity.html":{}}}],["5433",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":315,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["6.6.3",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["6.jpg",{"_index":533,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["7",{"_index":316,"title":{},"body":{"classes/Events1612265244438.html":{},"overview.html":{}}}],["7.0.2",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["7.6.9",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["7.9.8",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["7.webp",{"_index":534,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["75",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":317,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["8.5.1",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["8.jpg",{"_index":535,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["9",{"_index":318,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["9.jpg",{"_index":536,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["9231002233",{"_index":632,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["above",{"_index":780,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":502,"title":{},"body":{"classes/MediaResolver.html":{},"index.html":{}}}],["adding",{"_index":739,"title":{},"body":{"index.html":{}}}],["additional",{"_index":914,"title":{"additional-documentation/backend-api.html":{}},"body":{}}],["admin",{"_index":301,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["advanced",{"_index":847,"title":{},"body":{"index.html":{}}}],["advantage",{"_index":840,"title":{},"body":{"index.html":{}}}],["affected",{"_index":815,"title":{},"body":{"index.html":{}}}],["affected:e2e",{"_index":818,"title":{},"body":{"index.html":{}}}],["affected:test",{"_index":814,"title":{},"body":{"index.html":{}}}],["alongside",{"_index":845,"title":{},"body":{"index.html":{}}}],["alpha.3",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["always",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["america",{"_index":339,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["american",{"_index":373,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["angular",{"_index":759,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":881,"title":{"additional-documentation/backend-api.html":{}},"body":{"miscellaneous/variables.html":{}}}],["apollo",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":778,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":774,"title":{},"body":{"index.html":{}}}],["applications",{"_index":747,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":27,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":347,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["apps/.../app.resolver.ts",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../event.service.ts",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/app.controller.ts:7",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/backend/api/src/app/app.module.ts",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/backend/api/src/app/app.resolver.ts",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/auth.module.ts",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/backend/api/src/app/auth/decorators/auth.decorator.ts",{"_index":648,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:13",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:18",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:9",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:12",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:19",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:33",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts",{"_index":436,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:18",{"_index":440,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:8",{"_index":438,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts",{"_index":544,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:10",{"_index":559,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:16",{"_index":556,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:25",{"_index":550,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts",{"_index":173,"title":{},"body":{"classes/EventEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:13",{"_index":190,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:16",{"_index":192,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:19",{"_index":195,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:22",{"_index":198,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:31",{"_index":203,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:34",{"_index":206,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:37",{"_index":207,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:40",{"_index":210,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:43",{"_index":211,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:46",{"_index":212,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:49",{"_index":214,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/events.module.ts",{"_index":419,"title":{},"body":{"modules/EventsModule.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts",{"_index":222,"title":{},"body":{"classes/EventResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts:12",{"_index":240,"title":{},"body":{"classes/EventResolver.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts:28",{"_index":231,"title":{},"body":{"classes/EventResolver.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts:33",{"_index":233,"title":{},"body":{"classes/EventResolver.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts:8",{"_index":228,"title":{},"body":{"classes/EventResolver.html":{}}}],["apps/backend/api/src/app/events/services/event.service.ts",{"_index":265,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/events/services/event.service.ts:14",{"_index":270,"title":{},"body":{"injectables/EventService.html":{}}}],["apps/backend/api/src/app/events/services/event.service.ts:20",{"_index":274,"title":{},"body":{"injectables/EventService.html":{}}}],["apps/backend/api/src/app/events/services/event.service.ts:25",{"_index":277,"title":{},"body":{"injectables/EventService.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts",{"_index":459,"title":{},"body":{"classes/MediaEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:21",{"_index":461,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:24",{"_index":462,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:27",{"_index":465,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:36",{"_index":464,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:53",{"_index":468,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:57",{"_index":469,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:60",{"_index":470,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:63",{"_index":471,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:66",{"_index":472,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/medias.module.ts",{"_index":541,"title":{},"body":{"modules/MediasModule.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts",{"_index":477,"title":{},"body":{"classes/MediaResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts:12",{"_index":488,"title":{},"body":{"classes/MediaResolver.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts:17",{"_index":486,"title":{},"body":{"classes/MediaResolver.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts:23",{"_index":491,"title":{},"body":{"classes/MediaResolver.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts:8",{"_index":483,"title":{},"body":{"classes/MediaResolver.html":{}}}],["apps/backend/api/src/app/media/services/media.service.ts",{"_index":513,"title":{},"body":{"injectables/MediaService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/media/services/media.service.ts:14",{"_index":517,"title":{},"body":{"injectables/MediaService.html":{}}}],["apps/backend/api/src/app/media/services/media.service.ts:18",{"_index":518,"title":{},"body":{"injectables/MediaService.html":{}}}],["apps/backend/api/src/app/media/services/media.service.ts:8",{"_index":515,"title":{},"body":{"injectables/MediaService.html":{}}}],["apps/backend/api/src/app/users/decorators/user.decorator.ts",{"_index":656,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts",{"_index":569,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:13",{"_index":575,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:16",{"_index":573,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:25",{"_index":574,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:35",{"_index":577,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:38",{"_index":579,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:41",{"_index":578,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:44",{"_index":584,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:47",{"_index":572,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:50",{"_index":580,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/guards/gql.auth",{"_index":423,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts",{"_index":589,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:10",{"_index":592,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:15",{"_index":595,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts",{"_index":608,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:14",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:18",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:24",{"_index":614,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:30",{"_index":616,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:8",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/users.module.ts",{"_index":637,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/backend/api/src/environments/environment.prod.ts",{"_index":658,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/environments/environment.ts",{"_index":659,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/main.ts",{"_index":660,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apps/backend/api/src/migrations/1612206849026",{"_index":626,"title":{},"body":{"classes/Users1612206849026.html":{},"coverage.html":{}}}],["apps/backend/api/src/migrations/1612265095526",{"_index":524,"title":{},"body":{"classes/Medias1612265095526.html":{},"coverage.html":{}}}],["apps/backend/api/src/migrations/1612265244438",{"_index":288,"title":{},"body":{"classes/Events1612265244438.html":{},"coverage.html":{}}}],["args",{"_index":243,"title":{},"body":{"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"miscellaneous/variables.html":{}}}],["args('excludefirst",{"_index":249,"title":{},"body":{"classes/EventResolver.html":{}}}],["args('excludelast",{"_index":250,"title":{},"body":{"classes/EventResolver.html":{}}}],["args('limit",{"_index":247,"title":{},"body":{"classes/EventResolver.html":{}}}],["args('offset",{"_index":246,"title":{},"body":{"classes/EventResolver.html":{}}}],["args('order",{"_index":248,"title":{},"body":{"classes/EventResolver.html":{}}}],["args.password",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artifacts",{"_index":802,"title":{},"body":{"index.html":{}}}],["asia",{"_index":367,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["ast",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["aurora",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth/auth.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":430,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":432,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":37,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authresolver",{"_index":90,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":794,"title":{},"body":{"index.html":{}}}],["await",{"_index":133,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["backend",{"_index":719,"title":{"additional-documentation/backend-api.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["backend/api",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["bcrypt",{"_index":562,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["below",{"_index":757,"title":{},"body":{"index.html":{}}}],["body",{"_index":177,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/MediaEntity.html":{}}}],["bootstrap",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":853,"title":{},"body":{"index.html":{}}}],["browse",{"_index":858,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":676,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":755,"title":{},"body":{"index.html":{}}}],["building",{"_index":841,"title":{},"body":{"index.html":{}}}],["californian",{"_index":328,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["capabilities",{"_index":740,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":467,"title":{},"body":{"classes/MediaEntity.html":{}}}],["championship",{"_index":366,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["change",{"_index":796,"title":{},"body":{"index.html":{}}}],["circuit",{"_index":379,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["class",{"_index":19,"title":{"classes/AuthResolver.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"classes/Users1612206849026.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":104,"title":{},"body":{"classes/AuthResolver.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"classes/Users1612206849026.html":{},"overview.html":{}}}],["cli",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud",{"_index":506,"title":{},"body":{"classes/MediaResolver.html":{},"index.html":{}}}],["cluster_appmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":416,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":417,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_providers",{"_index":418,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_mediasmodule",{"_index":538,"title":{},"body":{"modules/MediasModule.html":{},"overview.html":{}}}],["cluster_mediasmodule_exports",{"_index":539,"title":{},"body":{"modules/MediasModule.html":{},"overview.html":{}}}],["cluster_mediasmodule_providers",{"_index":540,"title":{},"body":{"modules/MediasModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":634,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":635,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":636,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":798,"title":{},"body":{"index.html":{}}}],["column",{"_index":209,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["column('simple",{"_index":188,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["column({length",{"_index":581,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({type",{"_index":193,"title":{},"body":{"classes/EventEntity.html":{}}}],["community",{"_index":772,"title":{},"body":{"index.html":{}}}],["compare",{"_index":551,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":568,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":546,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":548,"title":{},"body":{"injectables/PasswordService.html":{}}}],["component",{"_index":800,"title":{},"body":{"index.html":{}}}],["computation",{"_index":828,"title":{},"body":{"index.html":{}}}],["concorso",{"_index":398,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["connect",{"_index":836,"title":{},"body":{"index.html":{}}}],["connection",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"classes/MediaResolver.html":{},"classes/Medias1612265095526.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(eventservice",{"_index":226,"title":{},"body":{"classes/EventResolver.html":{}}}],["constructor(jwtservice",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(mediarepository",{"_index":514,"title":{},"body":{"injectables/MediaService.html":{}}}],["constructor(mediaservice",{"_index":481,"title":{},"body":{"classes/MediaResolver.html":{}}}],["constructor(private",{"_index":130,"title":{},"body":{"classes/AuthResolver.html":{},"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"classes/UserResolver.html":{}}}],["constructor(userrepository",{"_index":268,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":591,"title":{},"body":{"classes/UserResolver.html":{}}}],["contents",{"_index":505,"title":{},"body":{"classes/MediaResolver.html":{}}}],["context",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["core",{"_index":758,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":640,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":781,"title":{},"body":{"index.html":{}}}],["created",{"_index":178,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["createdatecolumn",{"_index":191,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["createparamdecorator((data",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":612,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":433,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":435,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["currentuser",{"_index":597,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cypress",{"_index":817,"title":{},"body":{"index.html":{}}}],["data",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":511,"title":{},"body":{"classes/MediaResolver.html":{}}}],["db/migrations",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["de",{"_index":409,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["declarations",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":128,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":598,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":557,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["deleganza",{"_index":399,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["delete",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["dep",{"_index":820,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":29,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":849,"title":{},"body":{"index.html":{}}}],["description",{"_index":460,"title":{},"body":{"classes/MediaEntity.html":{},"injectables/PasswordService.html":{},"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["design",{"_index":397,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["dev",{"_index":730,"title":{},"body":{"index.html":{}}}],["developers",{"_index":855,"title":{},"body":{"index.html":{}}}],["developing",{"_index":744,"title":{},"body":{"index.html":{}}}],["development",{"_index":790,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":753,"title":{},"body":{"index.html":{}}}],["diagram",{"_index":822,"title":{},"body":{"index.html":{}}}],["different",{"_index":745,"title":{},"body":{"index.html":{}}}],["directory",{"_index":805,"title":{},"body":{"index.html":{}}}],["disable",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["dist",{"_index":804,"title":{},"body":{"index.html":{}}}],["dist/apps/backend/api/migrations/*{.ts",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/apps/backend/api/src/**/*.entity{.ts",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":641,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["down",{"_index":292,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["down(queryrunner",{"_index":294,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["dropschema",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":816,"title":{},"body":{"index.html":{}}}],["email",{"_index":570,"title":{},"body":{"classes/UserEntity.html":{},"classes/Users1612206849026.html":{}}}],["en\":\"a",{"_index":345,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"competition",{"_index":325,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"elkhart",{"_index":357,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"following",{"_index":363,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"for",{"_index":402,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"lamborghini",{"_index":396,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"no",{"_index":392,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"round",{"_index":341,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"super",{"_index":336,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"the",{"_index":370,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"world",{"_index":415,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["enable",{"_index":831,"title":{},"body":{"index.html":{}}}],["encoding",{"_index":501,"title":{},"body":{"classes/MediaResolver.html":{}}}],["end",{"_index":179,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"index.html":{}}}],["entities",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["entities/event.entity",{"_index":280,"title":{},"body":{"injectables/EventService.html":{},"modules/EventsModule.html":{}}}],["entities/media.entity",{"_index":519,"title":{},"body":{"injectables/MediaService.html":{},"modules/MediasModule.html":{}}}],["entities/user.entity",{"_index":599,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":215,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["entityserviceoptions",{"_index":273,"title":{},"body":{"injectables/EventService.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.connection",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["eslint",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["eslint/no",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["etc",{"_index":751,"title":{},"body":{"index.html":{}}}],["europe",{"_index":354,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["even",{"_index":834,"title":{},"body":{"index.html":{}}}],["event",{"_index":413,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["event.image",{"_index":474,"title":{},"body":{"classes/MediaEntity.html":{}}}],["event.owner",{"_index":585,"title":{},"body":{"classes/UserEntity.html":{}}}],["evententity",{"_index":63,"title":{"classes/EventEntity.html":{}},"body":{"modules/AppModule.html":{},"classes/EventEntity.html":{},"injectables/EventService.html":{},"modules/EventsModule.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["eventresolver",{"_index":221,"title":{"classes/EventResolver.html":{}},"body":{"classes/EventResolver.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["events",{"_index":201,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["events.ts",{"_index":289,"title":{},"body":{"classes/Events1612265244438.html":{},"coverage.html":{}}}],["events.ts:5",{"_index":298,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["events.ts:73",{"_index":296,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["events/entities/event.entity",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["events/events.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["events1612265244438",{"_index":287,"title":{"classes/Events1612265244438.html":{}},"body":{"classes/Events1612265244438.html":{},"coverage.html":{}}}],["eventservice",{"_index":227,"title":{"injectables/EventService.html":{}},"body":{"classes/EventResolver.html":{},"injectables/EventService.html":{},"modules/EventsModule.html":{},"coverage.html":{},"overview.html":{}}}],["eventserviceoptions",{"_index":281,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["eventsmodule",{"_index":38,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["example@example.com",{"_index":631,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["excludefirst",{"_index":237,"title":{},"body":{"classes/EventResolver.html":{}}}],["excludelast",{"_index":238,"title":{},"body":{"classes/EventResolver.html":{}}}],["execute",{"_index":811,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":427,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["experience",{"_index":852,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["explicit",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["export",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":685,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extendoptions",{"_index":279,"title":{},"body":{"injectables/EventService.html":{}}}],["extendoptions(eventserviceoptions",{"_index":284,"title":{},"body":{"injectables/EventService.html":{}}}],["extends",{"_index":431,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensible",{"_index":729,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":442,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":447,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["famous",{"_index":348,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["fastify",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["features",{"_index":736,"title":{},"body":{"index.html":{}}}],["fifth",{"_index":326,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["filename",{"_index":499,"title":{},"body":{"classes/MediaResolver.html":{}}}],["files",{"_index":797,"title":{},"body":{"index.html":{}}}],["final",{"_index":405,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["find",{"_index":266,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["find(options",{"_index":272,"title":{},"body":{"injectables/EventService.html":{}}}],["findone",{"_index":267,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["findone(id",{"_index":276,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["findonebyusername",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":617,"title":{},"body":{"injectables/UserService.html":{}}}],["finishresult",{"_index":255,"title":{},"body":{"classes/EventResolver.html":{}}}],["finishresult.slice(0",{"_index":258,"title":{},"body":{"classes/EventResolver.html":{}}}],["first",{"_index":403,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["flag",{"_index":807,"title":{},"body":{"index.html":{}}}],["format",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":764,"title":{},"body":{"index.html":{}}}],["francorchamps",{"_index":356,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["frontend",{"_index":854,"title":{},"body":{"index.html":{}}}],["frontends",{"_index":765,"title":{},"body":{"index.html":{}}}],["frontera",{"_index":411,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["full",{"_index":842,"title":{},"body":{"index.html":{}}}],["function",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":715,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":823,"title":{},"body":{"index.html":{}}}],["g",{"_index":776,"title":{},"body":{"index.html":{}}}],["gain",{"_index":839,"title":{},"body":{"index.html":{}}}],["generate",{"_index":773,"title":{},"body":{"index.html":{}}}],["generated",{"_index":725,"title":{},"body":{"index.html":{}}}],["generating",{"_index":749,"title":{},"body":{"index.html":{}}}],["generation",{"_index":848,"title":{},"body":{"index.html":{}}}],["getevent",{"_index":223,"title":{},"body":{"classes/EventResolver.html":{}}}],["getevent(@args('id",{"_index":260,"title":{},"body":{"classes/EventResolver.html":{}}}],["getevent(id",{"_index":229,"title":{},"body":{"classes/EventResolver.html":{}}}],["geteventlast",{"_index":224,"title":{},"body":{"classes/EventResolver.html":{}}}],["getevents",{"_index":225,"title":{},"body":{"classes/EventResolver.html":{}}}],["getevents(offset",{"_index":234,"title":{},"body":{"classes/EventResolver.html":{}}}],["gethash",{"_index":547,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":555,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getmedia",{"_index":478,"title":{},"body":{"classes/MediaResolver.html":{}}}],["getmedia(@args('id",{"_index":496,"title":{},"body":{"classes/MediaResolver.html":{}}}],["getmedia(id",{"_index":484,"title":{},"body":{"classes/MediaResolver.html":{}}}],["getmedias",{"_index":479,"title":{},"body":{"classes/MediaResolver.html":{}}}],["getrequest",{"_index":425,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":426,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":721,"title":{"index.html":{}},"body":{}}],["gp",{"_index":385,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["gqlauthguard",{"_index":422,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":429,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":434,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["graph",{"_index":821,"title":{},"body":{"index.html":{}}}],["graphql",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["graphqljson",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":601,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":424,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:7",{"_index":428,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":600,"title":{},"body":{"classes/UserResolver.html":{}}}],["hash",{"_index":554,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":566,"title":{},"body":{"injectables/PasswordService.html":{}}}],["help",{"_index":824,"title":{},"body":{"index.html":{}}}],["historic",{"_index":346,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["host",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hours",{"_index":350,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["http://localhost:4200",{"_index":793,"title":{},"body":{"index.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":564,"title":{},"body":{"injectables/PasswordService.html":{}}}],["https://nodejs.org/api/stream.html",{"_index":508,"title":{},"body":{"classes/MediaResolver.html":{}}}],["id",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["ievent",{"_index":175,"title":{},"body":{"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["ignoreexpiration",{"_index":448,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ilocale",{"_index":187,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["image",{"_index":180,"title":{},"body":{"classes/EventEntity.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{},"miscellaneous/variables.html":{}}}],["image.id",{"_index":310,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imageid",{"_index":323,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["images",{"_index":304,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["images.length",{"_index":308,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["images.map(image",{"_index":309,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids",{"_index":307,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[0",{"_index":344,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[1",{"_index":362,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[2",{"_index":369,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[3",{"_index":378,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[4",{"_index":384,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[5",{"_index":389,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[6",{"_index":391,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[7",{"_index":401,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[8",{"_index":412,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imedia",{"_index":199,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/UserEntity.html":{}}}],["implements",{"_index":174,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"classes/Users1612206849026.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{}}}],["imported",{"_index":788,"title":{},"body":{"index.html":{}}}],["imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":748,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{}}}],["inje",{"_index":364,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["injectable",{"_index":135,"title":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":278,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["injectrepository(evententity",{"_index":283,"title":{},"body":{"injectables/EventService.html":{}}}],["injectrepository(mediaentity",{"_index":520,"title":{},"body":{"injectables/MediaService.html":{}}}],["injectrepository(userentity",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["insert",{"_index":321,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["instantly",{"_index":838,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":737,"title":{},"body":{"index.html":{}}}],["international",{"_index":377,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["isvalid",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["iuser",{"_index":204,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["jerez",{"_index":408,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["jest",{"_index":813,"title":{},"body":{"index.html":{}}}],["js",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":189,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["json.parse('{\"id\":\"desc",{"_index":263,"title":{},"body":{"classes/EventResolver.html":{}}}],["json.parse(order",{"_index":254,"title":{},"body":{"classes/EventResolver.html":{}}}],["jwt",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":446,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":83,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind.string",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["la",{"_index":410,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["laguna",{"_index":342,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["lake",{"_index":358,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["lamborghini",{"_index":351,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["learn",{"_index":826,"title":{},"body":{"index.html":{}}}],["legend",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":587,"title":{},"body":{"classes/UserEntity.html":{}}}],["lib",{"_index":786,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":750,"title":{},"body":{"index.html":{}}}],["library",{"_index":784,"title":{},"body":{"index.html":{}}}],["limit",{"_index":235,"title":{},"body":{"classes/EventResolver.html":{}}}],["line",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["localhost",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(@signin",{"_index":132,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(signinpayload",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{}}}],["many",{"_index":742,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":216,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["manytoone('mediaentity",{"_index":200,"title":{},"body":{"classes/EventEntity.html":{}}}],["manytoone('userentity",{"_index":205,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["matching",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/backend-api.html":{}}}],["media",{"_index":219,"title":{},"body":{"classes/EventEntity.html":{},"classes/UserEntity.html":{}}}],["media.events",{"_index":220,"title":{},"body":{"classes/EventEntity.html":{}}}],["media.owner",{"_index":586,"title":{},"body":{"classes/UserEntity.html":{}}}],["media/entities/media.entity",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"classes/EventEntity.html":{},"classes/UserEntity.html":{}}}],["media/medias.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["mediaentity",{"_index":65,"title":{"classes/MediaEntity.html":{}},"body":{"modules/AppModule.html":{},"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"injectables/MediaService.html":{},"modules/MediasModule.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["mediarepository",{"_index":516,"title":{},"body":{"injectables/MediaService.html":{}}}],["mediaresolver",{"_index":476,"title":{"classes/MediaResolver.html":{}},"body":{"classes/MediaResolver.html":{},"modules/MediasModule.html":{},"coverage.html":{}}}],["medias",{"_index":305,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{}}}],["medias.ts",{"_index":525,"title":{},"body":{"classes/Medias1612265095526.html":{},"coverage.html":{}}}],["medias.ts:16",{"_index":526,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["medias.ts:4",{"_index":527,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["medias1612265095526",{"_index":523,"title":{"classes/Medias1612265095526.html":{}},"body":{"classes/Medias1612265095526.html":{},"coverage.html":{}}}],["mediaservice",{"_index":482,"title":{"injectables/MediaService.html":{}},"body":{"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"modules/MediasModule.html":{},"coverage.html":{},"overview.html":{}}}],["mediasmodule",{"_index":39,"title":{"modules/MediasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MediasModule.html":{},"modules.html":{},"overview.html":{}}}],["memoization",{"_index":829,"title":{},"body":{"index.html":{}}}],["message",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":504,"title":{},"body":{"classes/MediaResolver.html":{},"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["migrationinterface",{"_index":290,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["migrations",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mimetype",{"_index":500,"title":{},"body":{"classes/MediaResolver.html":{}}}],["minimal",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["minute",{"_index":733,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":714,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":26,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":28,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["monorepos",{"_index":731,"title":{},"body":{"index.html":{}}}],["more",{"_index":827,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":782,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":492,"title":{},"body":{"classes/MediaResolver.html":{}}}],["mutation('singleupload",{"_index":490,"title":{},"body":{"classes/MediaResolver.html":{}}}],["myjwtsecret",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":792,"title":{},"body":{"index.html":{}}}],["nest",{"_index":767,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/EventResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/MediaResolver.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/EventService.html":{},"modules/EventsModule.html":{},"injectables/MediaService.html":{},"modules/MediasModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["ng",{"_index":760,"title":{},"body":{"index.html":{}}}],["node",{"_index":770,"title":{},"body":{"index.html":{}}}],["north",{"_index":338,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["nrwl/angular",{"_index":687,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nrwl/angular:app",{"_index":777,"title":{},"body":{"index.html":{}}}],["nrwl/angular:lib",{"_index":785,"title":{},"body":{"index.html":{}}}],["nrwl/express",{"_index":769,"title":{},"body":{"index.html":{}}}],["nrwl/nest",{"_index":768,"title":{},"body":{"index.html":{}}}],["nrwl/node",{"_index":771,"title":{},"body":{"index.html":{}}}],["nrwl/react",{"_index":762,"title":{},"body":{"index.html":{}}}],["nrwl/web",{"_index":766,"title":{},"body":{"index.html":{}}}],["null",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventResolver.html":{},"classes/Events1612265244438.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":202,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["number",{"_index":196,"title":{},"body":{"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["nx",{"_index":727,"title":{},"body":{"index.html":{}}}],["nx’s",{"_index":846,"title":{},"body":{"index.html":{}}}],["nürburgring",{"_index":388,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["object",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offset",{"_index":241,"title":{},"body":{"classes/EventResolver.html":{}}}],["ondelete",{"_index":466,"title":{},"body":{"classes/MediaEntity.html":{}}}],["onetomany",{"_index":473,"title":{},"body":{"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["onetomany('evententity",{"_index":463,"title":{},"body":{"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["onetomany('mediaentity",{"_index":576,"title":{},"body":{"classes/UserEntity.html":{}}}],["optional",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["options",{"_index":275,"title":{},"body":{"injectables/EventService.html":{}}}],["order",{"_index":236,"title":{},"body":{"classes/EventResolver.html":{},"index.html":{}}}],["out",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":859,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":181,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["ownerid",{"_index":322,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{}}}],["package",{"_index":668,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":915,"title":{"additional-documentation/backend-api.html":{}},"body":{}}],["pairs",{"_index":830,"title":{},"body":{"index.html":{}}}],["param",{"_index":565,"title":{},"body":{"injectables/PasswordService.html":{}}}],["parameters",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["parseliteral(ast",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":613,"title":{},"body":{"injectables/UserService.html":{}}}],["pass",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":444,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":441,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":445,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":553,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":549,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":84,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["payload",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":457,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":458,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":571,"title":{},"body":{"classes/UserEntity.html":{},"classes/Users1612206849026.html":{}}}],["place",{"_index":182,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{}}}],["plain",{"_index":552,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["plugins",{"_index":743,"title":{},"body":{"index.html":{}}}],["plus",{"_index":850,"title":{},"body":{"index.html":{}}}],["port",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgres",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preferred",{"_index":844,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":197,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["private",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["prod",{"_index":806,"title":{},"body":{"index.html":{}}}],["production",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":724,"title":{},"body":{"index.html":{}}}],["project=my",{"_index":801,"title":{},"body":{"index.html":{}}}],["projects",{"_index":756,"title":{},"body":{"index.html":{}}}],["promise",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["properties",{"_index":176,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":291,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{}}}],["published",{"_index":183,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{}}}],["query",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"classes/UserResolver.html":{}}}],["query('event",{"_index":230,"title":{},"body":{"classes/EventResolver.html":{}}}],["query('eventlast",{"_index":232,"title":{},"body":{"classes/EventResolver.html":{}}}],["query('events",{"_index":239,"title":{},"body":{"classes/EventResolver.html":{}}}],["query('login",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('media",{"_index":485,"title":{},"body":{"classes/MediaResolver.html":{}}}],["query('medias",{"_index":487,"title":{},"body":{"classes/MediaResolver.html":{}}}],["query('user",{"_index":604,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":594,"title":{},"body":{"classes/UserResolver.html":{}}}],["queryrunner",{"_index":295,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["queryrunner.query",{"_index":320,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["queryrunner.query(`select",{"_index":300,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{}}}],["quick",{"_index":732,"title":{},"body":{"index.html":{}}}],["raceway",{"_index":329,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["rapidly",{"_index":832,"title":{},"body":{"index.html":{}}}],["react",{"_index":761,"title":{},"body":{"index.html":{}}}],["readme",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["readonly",{"_index":131,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["record",{"_index":509,"title":{},"body":{"classes/MediaResolver.html":{}}}],["recordfile",{"_index":512,"title":{},"body":{"classes/MediaResolver.html":{}}}],["reflect",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":282,"title":{},"body":{"injectables/EventService.html":{},"miscellaneous/variables.html":{}}}],["reload",{"_index":795,"title":{},"body":{"index.html":{}}}],["repository",{"_index":269,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolver",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{},"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":129,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('event",{"_index":245,"title":{},"body":{"classes/EventResolver.html":{}}}],["resolver('media",{"_index":494,"title":{},"body":{"classes/MediaResolver.html":{}}}],["resolver('user",{"_index":603,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/event.resolver",{"_index":420,"title":{},"body":{"modules/EventsModule.html":{}}}],["resolvers/media.resolver",{"_index":542,"title":{},"body":{"modules/MediasModule.html":{}}}],["resolvers/user.resolver",{"_index":638,"title":{},"body":{"modules/UsersModule.html":{}}}],["result",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/backend-api.html":{}}}],["result.length",{"_index":257,"title":{},"body":{"classes/EventResolver.html":{}}}],["result.slice(1",{"_index":256,"title":{},"body":{"classes/EventResolver.html":{}}}],["result[0",{"_index":264,"title":{},"body":{"classes/EventResolver.html":{}}}],["results",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/backend-api.html":{}}}],["return",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["round",{"_index":327,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["rounds",{"_index":561,"title":{},"body":{"injectables/PasswordService.html":{}}}],["ru",{"_index":330,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["ru\":\"lamborghini",{"_index":400,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["ru\":\"super",{"_index":340,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["run",{"_index":775,"title":{},"body":{"index.html":{}}}],["running",{"_index":808,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":560,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":545,"title":{},"body":{"injectables/PasswordService.html":{}}}],["same",{"_index":783,"title":{},"body":{"index.html":{}}}],["saving",{"_index":837,"title":{},"body":{"index.html":{}}}],["scaffolding",{"_index":799,"title":{},"body":{"index.html":{}}}],["scalar",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["season",{"_index":414,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["seca",{"_index":343,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["secret",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":449,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":563,"title":{},"body":{"injectables/PasswordService.html":{},"index.html":{}}}],["sent",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["series",{"_index":374,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["serve",{"_index":791,"title":{},"body":{"index.html":{}}}],["server",{"_index":690,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["services/auth.service",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/event.service",{"_index":244,"title":{},"body":{"classes/EventResolver.html":{},"modules/EventsModule.html":{}}}],["services/jwt.strategy",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/media.service",{"_index":493,"title":{},"body":{"classes/MediaResolver.html":{},"modules/MediasModule.html":{}}}],["services/password.service",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":602,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":728,"title":{},"body":{"index.html":{}}}],["shanghai",{"_index":383,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["shareable",{"_index":787,"title":{},"body":{"index.html":{}}}],["showing",{"_index":735,"title":{},"body":{"index.html":{}}}],["signin",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinresponse",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["singleupload",{"_index":480,"title":{},"body":{"classes/MediaResolver.html":{}}}],["singleupload(@args('file",{"_index":498,"title":{},"body":{"classes/MediaResolver.html":{}}}],["singleupload(file",{"_index":489,"title":{},"body":{"classes/MediaResolver.html":{}}}],["skip",{"_index":253,"title":{},"body":{"classes/EventResolver.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spa",{"_index":355,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["src",{"_index":306,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{}}}],["stack",{"_index":843,"title":{},"body":{"index.html":{}}}],["start",{"_index":184,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"index.html":{}}}],["started",{"_index":720,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["storage",{"_index":507,"title":{},"body":{"classes/MediaResolver.html":{}}}],["stored",{"_index":803,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":443,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":503,"title":{},"body":{"classes/MediaResolver.html":{}}}],["strecke",{"_index":387,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["strecke...europe",{"_index":386,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/MediaEntity.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":371,"title":{},"body":{"classes/Events1612265244438.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":856,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":741,"title":{},"body":{"index.html":{}}}],["svg",{"_index":857,"title":{},"body":{"modules.html":{}}}],["svs",{"_index":722,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["svs/entities",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/UserEntity.html":{}}}],["svs/mylib",{"_index":789,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t...north",{"_index":372,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["table",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":393,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["take",{"_index":252,"title":{},"body":{"classes/EventResolver.html":{}}}],["teams",{"_index":835,"title":{},"body":{"index.html":{}}}],["test",{"_index":754,"title":{},"body":{"index.html":{}}}],["tests",{"_index":810,"title":{},"body":{"index.html":{}}}],["this.authservice.login(signinpayload",{"_index":134,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.eventservice.find",{"_index":251,"title":{},"body":{"classes/EventResolver.html":{}}}],["this.eventservice.findone(id",{"_index":261,"title":{},"body":{"classes/EventResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mediarepository.find",{"_index":521,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediarepository.findone(id",{"_index":522,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediaservice.find",{"_index":495,"title":{},"body":{"classes/MediaResolver.html":{}}}],["this.mediaservice.findone(id",{"_index":497,"title":{},"body":{"classes/MediaResolver.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":567,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":620,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find(payload",{"_index":285,"title":{},"body":{"injectables/EventService.html":{}}}],["this.userrepository.findone(id",{"_index":286,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findone(user.id",{"_index":607,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(signinpayload.username",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["time",{"_index":404,"title":{},"body":{"classes/Events1612265244438.html":{},"index.html":{}}}],["times",{"_index":833,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":194,"title":{},"body":{"classes/EventEntity.html":{}}}],["title",{"_index":185,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{}}}],["tools",{"_index":698,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["trofeo",{"_index":337,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["true",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["tutorial",{"_index":738,"title":{},"body":{"index.html":{}}}],["type",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":218,"title":{},"body":{"classes/EventEntity.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([evententity",{"_index":421,"title":{},"body":{"modules/EventsModule.html":{}}}],["typeormmodule.forfeature([mediaentity",{"_index":543,"title":{},"body":{"modules/MediasModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":639,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":746,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["unauthorizedexception",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["understand",{"_index":819,"title":{},"body":{"index.html":{}}}],["unified",{"_index":851,"title":{},"body":{"index.html":{}}}],["unique",{"_index":583,"title":{},"body":{"classes/UserEntity.html":{}}}],["unit",{"_index":809,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":293,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{},"index.html":{}}}],["up(queryrunner",{"_index":297,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["updated",{"_index":186,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["updatedatecolumn",{"_index":217,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["updatedatecolumn({nullable",{"_index":213,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["uploads",{"_index":510,"title":{},"body":{"classes/MediaResolver.html":{}}}],["use",{"_index":779,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":596,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":605,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/MediaEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["user.id",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.medias",{"_index":475,"title":{},"body":{"classes/MediaEntity.html":{}}}],["user.password",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":61,"title":{"classes/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/Events1612265244438.html":{},"injectables/JwtStrategy.html":{},"classes/Medias1612265095526.html":{}}}],["username",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"classes/Events1612265244438.html":{},"injectables/JwtStrategy.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":271,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["userresolver",{"_index":588,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":299,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["users.length",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["users.ts",{"_index":627,"title":{},"body":{"classes/Users1612206849026.html":{},"coverage.html":{}}}],["users.ts:10",{"_index":630,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["users.ts:17",{"_index":629,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["users/entities/user.entity",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["users/services/user.service",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users1612206849026",{"_index":625,"title":{"classes/Users1612206849026.html":{}},"body":{"classes/Users1612206849026.html":{},"coverage.html":{}}}],["users[0",{"_index":302,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"injectables/UserService.html":{}}}],["users[0].id",{"_index":303,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{}}}],["userservice",{"_index":141,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":40,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":726,"title":{},"body":{"index.html":{}}}],["validate",{"_index":437,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["validate(payload",{"_index":439,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":558,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":324,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["variable",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":860,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":812,"title":{},"body":{"index.html":{}}}],["video",{"_index":734,"title":{},"body":{"index.html":{}}}],["virginia",{"_index":376,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["visit",{"_index":825,"title":{},"body":{"index.html":{}}}],["web",{"_index":763,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["well",{"_index":752,"title":{},"body":{"index.html":{}}}],["whoami",{"_index":590,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":606,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":593,"title":{},"body":{"classes/UserResolver.html":{}}}],["workspace",{"_index":723,"title":{},"body":{"index.html":{}}}],["world",{"_index":407,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["yeongam",{"_index":368,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["yes",{"_index":242,"title":{},"body":{"classes/EventResolver.html":{},"injectables/EventService.html":{}}}],["zone.js",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            index\n                        \n                        \n                    \n                \n            \n            \n                \nindex()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/app.controller.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n\n  @Get()\n  index() {\n    return { message: 'Welcome to backend/api!' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nMediasModule\n\nMediasModule\n\nAppModule -->\n\nMediasModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        README\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            MediasModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n    \n        Описание модуля app.module.ts\nКак использовать данный модуль\n\n    \n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { environment } from '../environments/environment';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { resolverMap } from './app.resolver';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { EventsModule } from './events/events.module';\nimport { MediasModule } from './media/medias.module';\nimport { UserEntity } from './users/entities/user.entity';\nimport { EventEntity } from './events/entities/event.entity';\nimport { MediaEntity } from './media/entities/media.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...environment.connection,\n      entities: [UserEntity, EventEntity, MediaEntity]\n    }),\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      context: ({ req }) => ({ req }),\n      playground: true,\n      resolvers: [resolverMap]\n    }),\n    UsersModule,\n    AuthModule,\n    EventsModule,\n    MediasModule\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { environment } from '../../environments/environment';\nimport { UsersModule } from '../users/users.module';\nimport { AuthResolver } from './resolvers/auth.resolver';\nimport { AuthService } from './services/auth.service';\nimport { JwtStrategy } from './services/jwt.strategy';\nimport { PasswordService } from './services/password.service';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      privateKey: environment.jwt.secret,\n      signOptions: {\n        expiresIn: environment.jwt.expiresIn\n      }\n    })\n  ],\n  providers: [AuthService, PasswordService, JwtStrategy, AuthResolver],\n  exports: [AuthService, PassportModule]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: SignInPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                                SignInPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\n\nimport type { SignInPayload, SignInResponse } from '@svs/entities';\n\nimport { SignIn } from '../decorators/auth.decorator';\nimport { AuthService } from '../services/auth.service';\n\n@Resolver('Auth')\nexport class AuthResolver {\n  constructor(private readonly authService: AuthService) {}\n\n  @Query('login')\n  async login(@SignIn() signInPayload: SignInPayload): Promise {\n    return await this.authService.login(signInPayload);\n  }\n\n  @Query('logout')\n  async logout(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: SignInPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                                SignInPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { SignInPayload, SignInResponse } from '@svs/entities';\n\nimport { environment } from '../../../environments/environment';\nimport { UserEntity } from '../../users/entities/user.entity';\nimport { UserService } from '../../users/services/user.service';\nimport { PasswordService } from './password.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) {}\n\n  async validateUser(username: string, pass: string): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    const isValid = user ? await this.passwordService.compareHash(pass, user.password) : false;\n\n    if (isValid) {\n      delete user.password;\n\n      return user;\n    }\n\n    return null;\n  }\n\n  async login(signInPayload: SignInPayload): Promise {\n    const user = await this.validateUser(signInPayload.username, signInPayload.password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    const payload = { username: user.username, userId: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      expiresIn: new Date(environment.jwt.expiresIn).getDate(),\n      id: user.id\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventEntity.html":{"url":"classes/EventEntity.html","title":"class - EventEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/events/entities/event.entity.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IEvent\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                created\n                            \n                            \n                                end\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                owner\n                            \n                            \n                                place\n                            \n                            \n                                published\n                            \n                            \n                                start\n                            \n                            \n                                title\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            end\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IMedia\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne('MediaEntity', 'events', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            owner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IUser\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne('UserEntity', 'events')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            place\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            published\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:49\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\nimport type { IEvent, ILocale, IMedia, IUser } from '@svs/entities';\n\n// import { MediaEntity } from '../../media/entities/media.entity';\n// import { UserEntity } from '../../users/entities/user.entity';\n\n@Entity({\n  name: 'events'\n})\nexport class EventEntity implements IEvent {\n  @Column('simple-json')\n  body: ILocale;\n\n  @CreateDateColumn()\n  created: string;\n\n  @Column({ type: 'timestamp' })\n  end: string;\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(\n    // () => MediaEntity,\n    // media => media.events,\n    'MediaEntity',\n    'events',\n    { nullable: true }\n  )\n  image: IMedia;\n\n  @ManyToOne('UserEntity', 'events')\n  owner: IUser;\n\n  @Column('simple-json', { nullable: true })\n  place: ILocale;\n\n  @Column()\n  published: boolean;\n\n  @Column({ type: 'timestamp' })\n  start: string;\n\n  @Column('simple-json')\n  title: ILocale;\n\n  @UpdateDateColumn({ nullable: true })\n  updated: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventResolver.html":{"url":"classes/EventResolver.html","title":"class - EventResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/events/resolvers/event.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEvent\n                            \n                            \n                                    Async\n                                getEventLAst\n                            \n                            \n                                    Async\n                                getEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventService: EventService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/events/resolvers/event.resolver.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventService\n                                                  \n                                                        \n                                                                        EventService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEvent(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('event')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/events/resolvers/event.resolver.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEventLAst\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventLAst()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('eventLast')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/events/resolvers/event.resolver.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEvents\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEvents(offset?: number, limit?: number, order?: string, excludeFirst?: boolean, excludeLast?: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('events')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/events/resolvers/event.resolver.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    excludeFirst\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    excludeLast\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Query, Resolver } from '@nestjs/graphql';\n\nimport { IEvent } from '@svs/entities';\n\nimport { EventService } from '../services/event.service';\n\n@Resolver('Event')\nexport class EventResolver {\n  constructor(private readonly eventService: EventService) {}\n\n  @Query('events')\n  async getEvents(\n    @Args('offset') offset?: number,\n    @Args('limit') limit?: number,\n    @Args('order') order?: string,\n    @Args('excludeFirst') excludeFirst?: boolean,\n    @Args('excludeLast') excludeLast?: boolean\n  ): Promise {\n    const result = await this.eventService.find({ take: limit, skip: offset, order: order ? JSON.parse(order) : null });\n\n    let finishResult = excludeFirst ? result.slice(1, result.length) : result;\n    finishResult = excludeLast ? finishResult.slice(0, result.length - 1) : finishResult;\n\n    return finishResult;\n  }\n\n  @Query('event')\n  async getEvent(@Args('id') id: number): Promise {\n    return this.eventService.findOne(id);\n  }\n\n  @Query('eventLast')\n  async getEventLAst(): Promise {\n    const result = await this.eventService.find({ take: 1, skip: 0, order: JSON.parse('{\"id\":\"DESC\"}') });\n\n    return result && result.length ? result[0] : null;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventService.html":{"url":"injectables/EventService.html","title":"injectable - EventService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EventService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/events/services/event.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/events/services/event.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: EntityServiceOptions)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/events/services/event.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            EntityServiceOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, options?: EntityServiceOptions)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/events/services/event.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            EntityServiceOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { EntityServiceOptions, extendOptions } from '@svs/entities';\n\nimport { EventEntity } from '../entities/event.entity';\n\nexport const eventServiceOptions: EntityServiceOptions = {\n  relations: ['image']\n};\n\n@Injectable()\nexport class EventService {\n  constructor(\n    @InjectRepository(EventEntity)\n    private readonly userRepository: Repository\n  ) {}\n\n  async find(options?: EntityServiceOptions): Promise {\n    const payload = extendOptions(eventServiceOptions, options);\n    return await this.userRepository.find(payload);\n  }\n\n  async findOne(id: number, options?: EntityServiceOptions): Promise {\n    const payload = extendOptions(eventServiceOptions, options);\n    return await this.userRepository.findOne(id, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Events1612265244438.html":{"url":"classes/Events1612265244438.html","title":"class - Events1612265244438","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Events1612265244438\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/migrations/1612265244438-Events.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612265244438-Events.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612265244438-Events.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Events1612265244438 implements MigrationInterface {\n\n  public async up(queryRunner: QueryRunner): Promise {\n    const users = await queryRunner.query(`SELECT id FROM users where username = 'admin'`);\n    const userId = users[0] ? users[0].id : 1;\n    const images: any[] = await queryRunner.query(`SELECT * FROM medias where src LIKE 'image-%'`);\n    const imagesIds = images && images.length ? images.map(image => image.id) : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    await queryRunner.query(`\n        INSERT INTO events (body, \"start\", \"end\", published, title, place, \"ownerId\", \"imageId\")\n        VALUES\n        ('{\"en\":\"Competition in the fifth round ... Californian raceway.\", \"ru\": \"Соревнования в пятом туре сезона ... гоночной трассе.\"}',\n        '2019-07-13 00:00:00.000000', '2019-07-14 00:00:00.000000',\n         true, '{\"en\":\"SUPER TROFEO NORTH AMERICA 2019\", \"ru\":\"SUPER TROFEO NORTH AMERICA 2019\"}',\n        '{\"en\":\"ROUND 5: LAGUNA SECA\", \"ru\":\"РАУНД 5: ЛАГУНА СЕКА\"}', ${userId}, ${imagesIds[0]}),\n\n       ('{\"en\":\"A historic appointment ... famous 24 Hours.\", \"ru\": \"Историческое событие для Lamborghini... часами.\"}',\n        '2019-07-26 00:00:00.000000', '2019-07-27 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Europe 2019\", \"ru\":\"Super Trofeo Europe 2019\"}',\n        '{\"en\":\"Round 4: Spa-Francorchamps\", \"ru\":\"Раунд 4: Спа-Франкоршам\"}', ${userId}, ${imagesIds[0]}),\n\n       ('{\"en\":\"Elkhart Lake, ... North America.\", \"ru\": \"Озеро Элкхарт, ... North America.\"}',\n        '2019-08-03 00:00:00.000000', '2019-08-04 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo North america 2019\", \"ru\":\"Super Trofeo North america 2019\"}',\n        '{\"en\":\"Round 3: Американская дорога\", \"ru\":\"Раунд 3: Спа-Франкоршам\"}', ${userId}, ${imagesIds[1]}),\n\n       ('{\"en\":\"Following Inje in 2013... the championship.\", \"ru\": \"После Inje в 2013 ...для четвертого тура чемпионата.\"}',\n        '2019-08-03 00:00:00.000000', '2019-08-04 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Asia 2019\", \"ru\":\"Super Trofeo Asia 2019\"}',\n        '{\"en\":\"Round 4: Yeongam\", \"ru\":\"Раунд 4: Йонам\"}', ${userId}, ${imagesIds[2]}),\n\n       ('{\"en\":\"The Super T...North American series.\", \"ru\": \"Super Trofeo North ... североамериканской серии.\"}',\n        '2019-08-24 00:00:00.000000', '2019-08-25 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo North america 2019\", \"ru\":\"Super Trofeo North america 2019\"}',\n        '{\"en\":\"Round 4: Virginia international raceway\", \"ru\":\"Раунд 4: Международная гоночная трасса Вирджиния\"}',\n        ${userId}, ${imagesIds[3]}),\n\n       ('{\"en\":\"The fifth and ... International Circuit.\", \"ru\": \"Пятый и последний раунд ... трассе Шанхая.\"}',\n        '2019-08-31 00:00:00.000000', '2019-09-01 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Asia 2019\", \"ru\":\"Super Trofeo Asia 2019\"}',\n        '{\"en\":\"Round 5: Shanghai\", \"ru\":\"Раунд 5: Шанхай\"}', ${userId}, ${imagesIds[4]}),\n\n       ('{\"en\":\"The GP Strecke...Europe 2019.\", \"ru\": \"GP Strecke принимает ... Europe 2019.\"}',\n        '2019-08-31 00:00:00.000000', '2019-09-01 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Europe 2019\", \"ru\":\"Super Trofeo Europe 2019\"}',\n        '{\"en\":\"Round 5: Nürburgring\", \"ru\":\"Раунд 5: Нюрбургринг\"}', ${userId}, ${imagesIds[5]}),\n\n       ('{\"en\":\"Competition in the... Californian raceway.\", \"ru\": \"Соревнования в пятом туре ...гоночной трассе.\"}',\n        '2019-09-14 00:00:00.000000', '2019-09-15 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo North America 2019\", \"ru\":\"Super Trofeo North America 2019\"}',\n        '{\"en\":\"Round 5: Laguna Seca\", \"ru\":\"Раунд 5: Лагуна Сека\"}', ${userId}, ${imagesIds[6]}),\n\n       ('{\"en\":\"NO TAGS\",\n       \"ru\": \"БЕЗ ТЕГОВ\"}',\n        '2019-09-19 00:00:00.000000', '2019-09-21 00:00:00.000000', true,\n        '{\"en\":\"Lamborghini & design concorso deleganza\", \"ru\":\"Lamborghini & дизайнерский конкурс элегантности\"}',\n        null, ${userId}, ${imagesIds[7]}),\n\n       ('{\"en\":\"For the first time, ... Final 2019.\",\"ru\": \"Впервые Lamborghini где ...World 2019.\"}',\n        '2019-10-24 00:00:00.000000', '2019-10-25 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Europe 2019\", \"ru\":\"Super Trofeo Europe 2019\"}',\n        '{\"en\":\"Round 6: Jerez de la Frontera\", \"ru\":\"Раунд 6: Херес де ла Фронтера\"}', ${userId}, ${imagesIds[8]}),\n\n       ('{\"en\":\"The Lamborghini ... event of the season.\", \"ru\": \"Мировой финал события... Lamborghini сезона.\"}',\n        '2019-10-26 00:00:00.000000', '2019-10-27 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo World Final 2019\", \"ru\":\"Super Trofeo World Final 2019\"}',\n        '{\"en\":\"World final: Jerez de la Frontera\", \"ru\":\"Мировой финал: Херес де ла Фронтера\"}', ${userId},\n        ${imagesIds[8]});\n    `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n        DELETE\n        FROM events\n        WHERE \"imageId\" LIKE 'image-%';\n    `);\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\n\nEventService \n\nEventService \n\n\n\nEventsModule\n\nEventsModule\n\nEventService  -->\n\nEventsModule->EventService \n\n\n\n\n\nEventService\n\nEventService\n\nEventsModule -->\n\nEventService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/events/events.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { EventEntity } from './entities/event.entity';\nimport { EventResolver } from './resolvers/event.resolver';\nimport { EventService } from './services/event.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([EventEntity])],\n  providers: [EventService, EventResolver],\n  exports: [EventService]\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequest\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/guards/gql.auth-guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n\n    return ctx.getContext().req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: environment.jwt.secret\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MediaEntity.html":{"url":"classes/MediaEntity.html","title":"class - MediaEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MediaEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/media/entities/media.entity.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IMedia\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                events\n                            \n                            \n                                id\n                            \n                            \n                                owner\n                            \n                            \n                                published\n                            \n                            \n                                src\n                            \n                            \n                                title\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            events\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IEvent[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany('EventEntity', 'image')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            owner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IUser\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne('UserEntity', 'medias', {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            published\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            src\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:66\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn\n} from 'typeorm';\n\nimport type {IEvent, ILocale, IMedia, IUser} from '@svs/entities';\n\n// import {EventEntity} from '../../events/entities/event.entity';\n// import {UserEntity} from '../../users/entities/user.entity';\n\n@Entity({\n  name: 'medias'\n})\nexport class MediaEntity implements IMedia {\n  @CreateDateColumn()\n  created: string;\n\n  @Column('simple-json', {nullable: true})\n  description: ILocale;\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  // @OneToMany(\n  //   () => EventEntity,\n  //   event => event.image\n  // )\n  // events?: IEvent[];\n\n  @OneToMany('EventEntity', 'image')\n  events?: IEvent[];\n\n\n  // @ManyToOne(\n  //   () => UserEntity,\n  //   user => user.medias,\n  //   {\n  //     onDelete: 'CASCADE'\n  //   }\n  // )\n  // owner: IUser;\n\n  @ManyToOne('UserEntity', 'medias',\n    {\n      onDelete: 'CASCADE'\n    }\n  )\n  owner: IUser;\n\n\n  @Column()\n  published: boolean;\n\n  @Column()\n  src: string;\n\n  @Column('simple-json', {nullable: true})\n  title: ILocale;\n\n  @UpdateDateColumn({nullable: true})\n  updated: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MediaResolver.html":{"url":"classes/MediaResolver.html","title":"class - MediaResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MediaResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/media/resolvers/media.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMedia\n                            \n                            \n                                    Async\n                                getMedias\n                            \n                            \n                                    Async\n                                singleUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mediaService: MediaService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/media/resolvers/media.resolver.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMedia\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMedia(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('media')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/media/resolvers/media.resolver.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMedias\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMedias()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('medias')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/media/resolvers/media.resolver.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            singleUpload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    singleUpload(file: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation('singleUpload')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/media/resolvers/media.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\n\nimport { IMedia } from '@svs/entities';\n\nimport { MediaService } from '../services/media.service';\n\n@Resolver('Media')\nexport class MediaResolver {\n  constructor(private readonly mediaService: MediaService) {}\n\n  @Query('medias')\n  async getMedias(): Promise {\n    return this.mediaService.find();\n  }\n\n  @Query('media')\n  async getMedia(@Args('id') id: number): Promise {\n    return this.mediaService.findOne(id);\n  }\n\n  @Mutation('singleUpload')\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async singleUpload(@Args('file') file: any) {\n    const { filename, mimetype, encoding } = await file;\n\n    // 0. add stream to const {} = await file\n\n    // 1. Validate file metadata.\n\n    // 2. Stream file contents into cloud storage:\n    // https://nodejs.org/api/stream.html\n\n    // 3. Record the file uploads in your DB.\n    // const id = await recordFile( … )\n\n    return { filename, mimetype, encoding };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MediaService.html":{"url":"injectables/MediaService.html","title":"injectable - MediaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/media/services/media.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mediaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/media/services/media.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mediaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/media/services/media.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/media/services/media.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { MediaEntity } from '../entities/media.entity';\n\n@Injectable()\nexport class MediaService {\n  constructor(\n    @InjectRepository(MediaEntity)\n    private readonly mediaRepository: Repository\n  ) {}\n\n  async find(): Promise {\n    return await this.mediaRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    return await this.mediaRepository.findOne(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Medias1612265095526.html":{"url":"classes/Medias1612265095526.html","title":"class - Medias1612265095526","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Medias1612265095526\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/migrations/1612265095526-Medias.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612265095526-Medias.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612265095526-Medias.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Medias1612265095526 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    const users = await queryRunner.query(`SELECT id FROM users where username = 'admin'`);\n    const userId = users[0] ? users[0].id : 1;\n    await queryRunner.query(`\n      INSERT INTO medias (published, src, \"ownerId\")\n      VALUES (true, 'image-1.webp', ${userId}), (true, 'image-2.jpg', ${userId}), (true, 'image-3.webp', ${userId}),\n             (true, 'image-4.webp', ${userId}), (true, 'image-5.webp', ${userId}), (true, 'image-6.jpg', ${userId}),\n             (true, 'image-7.webp', ${userId}), (true, 'image-8.jpg', ${userId}), (true, 'image-9.jpg', ${userId}),\n             (true, 'image-10.jpg', ${userId});\n    `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n      DELETE FROM medias WHERE src LIKE 'image-%';\n    `);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MediasModule.html":{"url":"modules/MediasModule.html","title":"module - MediasModule","body":"\n                   \n\n\n\n\n    Modules\n    MediasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MediasModule\n\n\n\ncluster_MediasModule_exports\n\n\n\ncluster_MediasModule_providers\n\n\n\n\nMediaService \n\nMediaService \n\n\n\nMediasModule\n\nMediasModule\n\nMediaService  -->\n\nMediasModule->MediaService \n\n\n\n\n\nMediaService\n\nMediaService\n\nMediasModule -->\n\nMediaService->MediasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/media/medias.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MediaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MediaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { MediaEntity } from './entities/media.entity';\nimport { MediaResolver } from './resolvers/media.resolver';\nimport { MediaService } from './services/media.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([MediaEntity])],\n  providers: [MediaService, MediaResolver],\n  exports: [MediaService]\n})\nexport class MediasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/password.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            compareHash\n                        \n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:25\n                \n            \n\n\n            \n                \n                    Compare plain password with password hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHash\n                        \n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:16\n                \n            \n\n\n            \n                \n                    Return hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            saltRounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:10\n                            \n                        \n\n                \n                    \n                        Salt rounds\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\n\n@Injectable()\nexport class PasswordService {\n  /**\n   * Salt rounds\n   * @see https://github.com/kelektiv/node.bcrypt.js#readme\n   */\n  private saltRounds = 10;\n\n  /**\n   * Return hash\n   * @param password Plain password\n   */\n  getHash(password: string): Promise {\n    return hash(password, this.saltRounds);\n  }\n\n  /**\n   * Compare plain password with password hash\n   * @param password Plain password\n   * @param passwordHash Password hash\n   */\n  compareHash(password: string, passwordHash: string): Promise {\n    return compare(password, passwordHash);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/entities/user.entity.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                events\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                medias\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            events\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IEvent[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany('EventEntity', 'owner')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            medias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IMedia[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany('MediaEntity', 'owner')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 50, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\nimport type {IEvent, IMedia, IUser} from '@svs/entities';\n\n// import { EventEntity } from '../../events/entities/event.entity';\n// import { MediaEntity } from '../../media/entities/media.entity';\n\n@Entity({\n  name: 'users'\n})\nexport class UserEntity implements IUser {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  // @OneToMany(\n  //   () => EventEntity,\n  //   event => event.owner\n  // )\n  // events?: Event[];\n\n  @OneToMany('EventEntity', 'owner')\n  events?: IEvent[];\n\n\n  // @OneToMany(\n  //   () => MediaEntity,\n  //   media => media.owner\n  // )\n  // medias?: IMedia[];\n\n  @OneToMany('MediaEntity', 'owner')\n  medias?: IMedia[];\n\n  @Column()\n  phone: string;\n\n  @Column()\n  password: string;\n\n  @Column({ length: 50, unique: true })\n  username: string;\n\n  @CreateDateColumn()\n  created: string;\n\n  @UpdateDateColumn({ nullable: true })\n  updated: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/resolvers/user.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            whoAmI\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    whoAmI(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport { Query, Resolver } from '@nestjs/graphql';\n\nimport { CurrentUser } from '../decorators/user.decorator';\nimport { UserEntity } from '../entities/user.entity';\nimport { GqlAuthGuard } from '../guards/gql.auth-guard';\nimport { UserService } from '../services/user.service';\n\n@Resolver('User')\nexport class UserResolver {\n  constructor(private readonly userService: UserService) {}\n\n  @Query('user')\n  @UseGuards(GqlAuthGuard)\n  async whoAmI(@CurrentUser() user: UserEntity) {\n    return this.userService.findOne(user.id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/services/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/services/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UserEntity } from '../entities/user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository\n  ) {}\n\n  async find(): Promise {\n    return await this.userRepository.find();\n  }\n\n  async findOneByUsername(username: string): Promise {\n    const users = await this.userRepository.find({ username });\n\n    return users.length === 1 ? users[0] : null;\n  }\n\n  async createUser(user: Partial): Promise {\n    const newUser = await this.userRepository.create(user);\n\n    return this.userRepository.save(newUser);\n  }\n\n  async findOne(id: number): Promise {\n    return (await this.userRepository.findOne(id)) || null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users1612206849026.html":{"url":"classes/Users1612206849026.html","title":"class - Users1612206849026","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users1612206849026\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/migrations/1612206849026-Users.ts\n        \n\n            \n                Description\n            \n            \n                Insert user with\nusername: admin\npassword: 123456\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                down\n                            \n                            \n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612206849026-Users.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612206849026-Users.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\n/**\n * Insert user with\n * username: admin\n * password: 123456\n */\n\nexport class Users1612206849026 implements MigrationInterface {\n  async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n      INSERT INTO users (username, email, phone, password)\n      VALUES ('admin', 'example@example.com', '9231002233', '$2b$10$A4x21zZO7IKU59ScZNozee7ndO1MXcDXkaZ8h3oTI65D7qRPDatTO');\n    `);\n  }\n\n  async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n      DELETE FROM users WHERE username = 'admin';\n    `);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserEntity } from './entities/user.entity';\nimport { UserResolver } from './resolvers/user.resolver';\nimport { UserService } from './services/user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  providers: [UserService, UserResolver],\n  exports: [UserService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/events/entities/event.entity.ts\n            \n            class\n            EventEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/events/resolvers/event.resolver.ts\n            \n            class\n            EventResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/events/services/event.service.ts\n            \n            injectable\n            EventService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/events/services/event.service.ts\n            \n            variable\n            eventServiceOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/media/entities/media.entity.ts\n            \n            class\n            MediaEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/media/resolvers/media.resolver.ts\n            \n            class\n            MediaResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/media/services/media.service.ts\n            \n            injectable\n            MediaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/backend/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/migrations/1612206849026-Users.ts\n            \n            class\n            Users1612206849026\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/migrations/1612265095526-Medias.ts\n            \n            class\n            Medias1612265095526\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/migrations/1612265244438-Events.ts\n            \n            class\n            Events1612265244438\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^11.0.0\n        \n            @angular/common : ^11.0.0\n        \n            @angular/compiler : ^11.0.0\n        \n            @angular/core : ^11.0.0\n        \n            @angular/forms : ^11.0.0\n        \n            @angular/platform-browser : ^11.0.0\n        \n            @angular/platform-browser-dynamic : ^11.0.0\n        \n            @angular/router : ^11.0.0\n        \n            @nestjs/common : ^7.6.9\n        \n            @nestjs/core : ^7.6.9\n        \n            @nestjs/graphql : ^7.9.8\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.9\n        \n            @nestjs/platform-fastify : ^7.6.9\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @nrwl/angular : 11.2.6\n        \n            apollo-server-express : ^2.19.2\n        \n            apollo-server-fastify : ^3.0.0-alpha.3\n        \n            bcrypt : ^5.0.0\n        \n            fastify-static : ^3.4.0\n        \n            graphql : ^15.5.0\n        \n            graphql-tools : ^7.0.2\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.6.3\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.30\n        \n            zone.js : ^0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    This is not a production server yet!\nThis is only a minimal backend to get started.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSVS workspace\nThis project was generated using Nx.\n\n\n🔎 Nx is a set of Extensible Dev Tools for Monorepos.\nQuick Start & Documentation\nNx Documentation\n10-minute video showing all Nx features\nInteractive Tutorial\nAdding capabilities to your workspace\nNx supports many plugins which add capabilities for developing different types of applications and different tools.\nThese capabilities include generating applications, libraries, etc as well as the devtools to test, and build projects as well.\nBelow are our core plugins:\n\nAngular\nng add @nrwl/angular\n\n\nReact\nng add @nrwl/react\n\n\nWeb (no framework frontends)\nng add @nrwl/web\n\n\nNest\nng add @nrwl/nest\n\n\nExpress\nng add @nrwl/express\n\n\nNode\nng add @nrwl/node\n\n\n\nThere are also many community plugins you could add.\nGenerate an application\nRun ng g @nrwl/angular:app my-app to generate an application.\n\nYou can use any of the plugins above to generate applications as well.\n\nWhen using Nx, you can create multiple applications and libraries in the same workspace.\nGenerate a library\nRun ng g @nrwl/angular:lib my-lib to generate a library.\n\nYou can also use any of the plugins above to generate libraries as well.\n\nLibraries are shareable across libraries and applications. They can be imported from @svs/mylib.\nDevelopment server\nRun ng serve my-app for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng g component my-component --project=my-app to generate a new component.\nBuild\nRun ng build my-app to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test my-app to execute the unit tests via Jest.\nRun nx affected:test to execute the unit tests affected by a change.\nRunning end-to-end tests\nRun ng e2e my-app to execute the end-to-end tests via Cypress.\nRun nx affected:e2e to execute the end-to-end tests affected by a change.\nUnderstand your workspace\nRun nx dep-graph to see a diagram of the dependencies of your projects.\nFurther help\nVisit the Nx Documentation to learn more.\n☁ Nx Cloud\nComputation Memoization in the Cloud\n\n\nNx Cloud pairs with Nx in order to enable you to build and test code more rapidly, by up to 10 times. Even teams that are new to Nx can connect to Nx Cloud and start saving time instantly.\nTeams using Nx gain the advantage of building full-stack applications with their preferred framework alongside Nx’s advanced code generation and project dependency graph, plus a unified experience for both frontend and backend developers.\nVisit Nx Cloud to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MediasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_MediasModule\n\n\n\ncluster_MediasModule_exports\n\n\n\ncluster_MediasModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nEventService \n\nEventService \n\nEventService  -->\n\nEventsModule->EventService \n\n\n\n\n\nMediasModule\n\nMediasModule\n\nAppModule -->\n\nMediasModule->AppModule\n\n\n\n\n\nMediaService \n\nMediaService \n\nMediaService  -->\n\nMediasModule->MediaService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nEventService\n\nEventService\n\nEventsModule -->\n\nEventService->EventsModule\n\n\n\n\n\nMediaService\n\nMediaService\n\nMediasModule -->\n\nMediaService->MediasModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            eventServiceOptions   (apps/.../event.service.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/app/users/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CurrentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  return ctx;\n})\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true,\n  jwt: {\n    secret: 'MyJWTSecret',\n    expiresIn: 15000000\n  },\n  connection: {\n    type: null,\n    host: null,\n    port: null,\n    username: null,\n    password: null,\n    database: null,\n    synchronize: false\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n  jwt: {\n    secret: 'MyJWTSecret',\n    expiresIn: 15000000\n  },\n  connection: {\n    type: 'postgres' as 'aurora-data-api',\n    host: 'localhost',\n    port: 5433,\n    username: 'postgres',\n    password: '123456',\n    database: 'SVS',\n    dropSchema: false,\n    synchronize: true,\n    logging: true,\n    entities: [\n      \"dist/apps/backend/api/src/**/*.entity{.ts, .js}\"\n    ],\n    migrations: [\n      \"dist/apps/backend/api/migrations/*{.ts, .js}\"\n    ],\n    cli: {\n      \"migrationsDir\": \"db/migrations\"\n    }\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/app/events/services/event.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            eventServiceOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EntityServiceOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  relations: ['image']\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/app/app.resolver.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            resolverMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    parseValue(value: string) {\n      return new Date(value); // value from the client\n    },\n    serialize(value: Date) {\n      return value.toISOString(); // value sent to the client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.STRING) {\n        return new Date(ast.value); // ast value is always in string format\n      }\n      return null;\n    }\n  }),\n  JSON: GraphQLJSON\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SignIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  const args = ctx.getArgs()[1];\n\n  return { username: args.username, password: args.password };\n})\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/backend-api.html":{"url":"additional-documentation/backend-api.html","title":"additional-page - Backend-API","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nпроверка стартовой страницы\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
