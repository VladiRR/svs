var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,2.035,1,2.035]],["body/controllers/AppController.html",[0,3.345,1,3.345,2,3.55,3,0.43,4,0.372,5,0.372,6,3.55,7,0.784,8,1.236,9,1.846,10,0.033,11,0.763,12,4.261,13,1.009,14,5.219,15,1.691,16,0.43,17,1.009,18,0.43,19,0.097,20,1.202,21,4.261,22,4.261,23,0.022,24,0.027,25,0.022]],["title/modules/AppModule.html",[26,1.062,27,2.035]],["body/modules/AppModule.html",[1,3.021,2,3.414,3,0.297,4,0.257,5,0.257,10,0.034,16,0.618,17,0.698,18,0.297,19,0.067,23,0.015,24,0.021,25,0.015,26,1.576,27,3.898,28,1.276,29,1.169,30,1.534,31,1.534,32,1.276,33,1.534,34,1.534,35,2.454,36,2.454,37,3.19,38,3.19,39,3.19,40,2.888,41,2.134,42,1.534,43,1.534,44,2.945,45,2.945,46,2.358,47,2.945,48,2.945,49,1.888,50,1.276,51,1.534,52,1.888,53,2.945,54,1.396,55,2.963,56,2.945,57,2.454,58,2.945,59,2.945,60,2.945,61,1.492,62,1.888,63,1.775,64,2.13,65,1.775,66,2.13,67,2.945,68,2.945,69,2.454,70,2.945,71,2.945,72,2.454,73,2.454,74,4.098,75,2.945,76,1.276,77,2.945]],["title/modules/AuthModule.html",[26,1.062,37,1.827]],["body/modules/AuthModule.html",[3,0.318,4,0.275,5,0.275,10,0.033,16,0.603,17,0.747,18,0.318,19,0.072,23,0.016,24,0.022,25,0.016,26,1.634,28,1.366,29,1.252,30,1.643,31,1.643,32,1.366,33,2.545,34,2.545,37,3.563,40,2.949,41,2.238,42,1.643,43,1.643,46,2.472,51,1.643,52,2.022,57,2.628,78,2.628,79,3.154,80,2.628,81,2.628,82,3.204,83,3.258,84,2.949,85,3.154,86,3.154,87,2.281,88,4.296,89,2.022,90,2.754,91,3.154,92,2.628,93,3.154,94,3.154,95,3.154,96,3.154,97,2.022,98,3.154,99,3.154,100,2.628,101,3.154,102,2.281,103,3.154]],["title/classes/AuthResolver.html",[19,0.073,90,2.035]],["body/classes/AuthResolver.html",[3,0.346,4,0.299,5,0.299,7,0.445,8,1.076,9,1.967,10,0.033,11,0.912,13,1.076,16,0.547,18,0.346,19,0.078,20,1.281,23,0.018,24,0.023,25,0.018,54,1.624,76,1.484,82,3.021,90,2.911,92,2.854,104,1.146,105,2.854,106,1.781,107,3.783,108,5.424,109,1.36,110,3.426,111,3.426,112,1.175,113,0.813,114,0.741,115,0.983,116,2.854,117,4.832,118,4.541,119,3.426,120,1.814,121,4.541,122,3.426,123,2.196,124,2.196,125,2.854,126,1.484,127,2.477,128,3.426,129,3.426,130,2.196,131,1.484,132,3.426,133,1.248,134,3.426]],["title/injectables/AuthService.html",[82,1.654,135,0.752]],["body/injectables/AuthService.html",[3,0.274,4,0.237,5,0.237,7,0.353,8,0.917,10,0.033,11,0.808,13,0.917,15,2.144,16,0.561,17,0.643,18,0.274,19,0.062,20,1.272,23,0.014,24,0.02,25,0.014,51,1.415,52,1.741,61,0.989,62,1.741,82,2.016,84,2.895,87,1.964,102,1.964,106,1.659,107,3.225,109,1.536,112,1.167,113,0.808,114,0.656,115,0.976,116,3.225,117,4.329,120,1.644,125,2.263,126,1.177,131,1.954,133,1.642,135,0.917,136,1.177,137,2.263,138,3.871,139,2.716,140,5.402,141,2.635,142,2.716,143,2.716,144,3.871,145,4.51,146,2.716,147,1.677,148,3.871,149,2.716,150,2.716,151,2.595,152,1.951,153,2.99,154,2.716,155,3.871,156,2.716,157,3.871,158,1.964,159,1.741,160,1.563,161,2.716,162,2.716,163,2.716,164,2.481,165,1.964,166,2.716,167,1.741,168,3.871,169,2.716,170,2.716,171,2.716,172,0.908]],["title/classes/EventEntity.html",[19,0.073,63,1.375]],["body/classes/EventEntity.html",[3,0.248,4,0.215,5,0.215,7,0.32,9,2.519,10,0.033,11,1.041,15,2.196,16,0.474,18,0.248,19,0.056,23,0.013,24,0.019,25,0.013,61,0.896,62,1.578,63,1.562,65,1.848,66,1.78,76,2.262,104,0.823,113,0.441,114,0.872,126,1.066,172,1.426,173,2.051,174,1.878,175,2.734,176,2.311,177,3.553,178,3.084,179,3.084,180,2.222,181,3.084,182,3.553,183,2.734,184,3.084,185,3.084,186,3.084,187,4.495,188,4.351,189,3.348,190,2.461,191,3.084,192,2.461,193,3.605,194,4.696,195,2.461,196,1.431,197,3.084,198,2.461,199,2.734,200,2.461,201,3.204,202,3.614,203,2.461,204,3.084,205,3.003,206,2.461,207,2.461,208,2.607,209,3.614,210,2.461,211,2.461,212,2.461,213,1.78,214,2.461,215,2.607,216,3.003,217,2.607,218,0.896,219,2.051,220,2.461]],["title/classes/EventResolver.html",[19,0.073,221,2.035]],["body/classes/EventResolver.html",[3,0.261,4,0.225,5,0.225,7,0.336,8,0.884,9,1.899,10,0.033,11,0.86,13,1.039,15,1.74,16,0.442,18,0.261,19,0.059,20,1.236,23,0.026,24,0.019,25,0.013,54,1.224,104,0.864,106,1.755,109,1.025,112,1.134,113,0.785,114,0.638,115,0.949,120,1.776,123,1.655,124,1.655,126,1.119,130,1.655,131,1.119,133,1.359,152,1.481,160,2.148,172,1.248,175,1.655,196,2.267,208,3.84,221,2.393,222,2.152,223,3.733,224,4.803,225,4.384,226,2.583,227,2.766,228,2.583,229,2.583,230,3.733,231,2.583,232,3.733,233,2.583,234,2.583,235,4.803,236,4.424,237,4.803,238,4.803,239,3.733,240,2.583,241,4.384,242,4.245,243,1.868,244,2.152,245,2.583,246,2.583,247,2.583,248,2.583,249,2.583,250,2.583,251,3.733,252,3.733,253,3.733,254,2.583,255,4.803,256,2.583,257,4.384,258,2.583,259,1.944,260,2.583,261,2.583,262,1.868,263,2.583,264,2.583]],["title/injectables/EventService.html",[135,0.752,227,1.654]],["body/injectables/EventService.html",[3,0.313,4,0.271,5,0.271,7,0.403,8,1.006,10,0.033,11,0.867,13,1.006,16,0.55,17,0.735,18,0.429,19,0.071,20,1.198,23,0.016,24,0.022,25,0.016,50,1.344,63,1.344,106,1.731,109,1.686,112,1.253,113,0.867,114,0.705,115,1.049,120,1.742,126,1.344,131,1.344,133,1.547,135,1.006,136,1.344,151,1.786,152,1.922,165,3.503,172,1.038,180,1.616,196,1.922,218,1.13,227,2.213,242,3.539,265,2.244,266,3.072,267,3.072,268,2.585,269,3.767,270,3.104,271,3.539,272,4.249,273,4.894,274,3.104,275,5.635,276,3.072,277,3.104,278,2.244,279,3.104,280,2.585,281,2.244,282,2.585,283,3.104,284,4.249,285,3.104,286,2.585]],["title/classes/Events1612265244438.html",[19,0.073,287,2.296]],["body/classes/Events1612265244438.html",[3,0.143,4,0.124,5,0.124,7,0.184,8,0.555,10,0.034,11,0.42,13,0.555,16,0.143,18,0.143,19,0.032,23,0.007,24,0.012,25,0.007,76,2.176,104,0.475,106,1.274,112,0.607,113,0.42,114,0.341,115,0.508,120,1.163,133,1.267,147,0.615,152,1.38,159,0.91,160,0.817,167,3.29,172,0.475,174,1.221,177,1.183,179,1.027,180,1.221,182,1.183,183,0.91,184,1.027,185,1.027,201,1.503,218,0.517,259,1.221,287,1.696,288,2.496,289,1.183,290,2.166,291,3.454,292,1.696,293,1.503,294,1.696,295,3.439,296,1.42,297,1.696,298,1.42,299,1.349,300,1.954,301,1.027,302,1.027,303,1.183,304,2.345,305,0.91,306,1.027,307,1.42,308,1.42,309,1.42,310,1.42,311,1.183,312,2.496,313,4.387,314,3.962,315,2.996,316,1.183,317,1.42,318,1.42,319,2.468,320,1.696,321,1.027,322,1.183,323,2.345,324,1.027,325,2.345,326,2.345,327,1.42,328,2.345,329,2.996,330,5.671,331,6.216,332,3.478,333,1.42,334,5.754,335,2.345,336,4.899,337,5.714,338,5.024,339,4.899,340,4.899,341,4.755,342,2.345,343,2.345,344,2.345,345,1.42,346,1.42,347,1.42,348,1.42,349,2.996,350,1.42,351,3.478,352,2.345,353,2.345,354,4.387,355,1.42,356,1.42,357,1.42,358,1.42,359,4.587,360,2.345,361,2.345,362,1.42,363,1.42,364,2.345,365,2.345,366,1.42,367,3.478,368,1.42,369,1.42,370,3.478,371,1.954,372,1.42,373,1.42,374,1.42,375,2.345,376,1.42,377,2.345,378,1.42,379,1.42,380,2.345,381,4.146,382,2.345,383,1.42,384,1.42,385,2.345,386,1.42,387,1.42,388,1.42,389,1.42,390,1.42,391,1.42,392,1.42,393,1.42,394,1.42,395,1.42,396,1.42,397,1.42,398,1.42,399,1.42,400,1.42,401,1.42,402,1.42,403,1.42,404,1.183,405,3.478,406,1.42,407,2.996,408,2.345,409,2.345,410,2.345,411,2.345,412,2.345,413,1.027,414,1.42,415,1.42]],["title/modules/EventsModule.html",[26,1.062,38,1.827]],["body/modules/EventsModule.html",[3,0.382,4,0.33,5,0.33,10,0.033,16,0.588,17,0.897,18,0.382,19,0.087,23,0.019,24,0.025,25,0.019,26,1.788,28,1.64,29,1.502,30,1.972,31,1.972,32,1.64,33,2.784,34,2.784,38,3.486,41,2.524,42,1.972,43,1.972,46,2.178,49,2.427,50,1.64,63,1.64,221,3.107,227,3.293,244,3.154,280,3.154,416,3.154,417,3.154,418,3.154,419,3.786,420,3.786,421,3.786]],["title/injectables/GqlAuthGuard.html",[135,0.752,422,2.035]],["body/injectables/GqlAuthGuard.html",[3,0.403,4,0.349,5,0.349,7,0.519,8,1.188,10,0.033,11,0.715,13,0.946,16,0.553,17,0.946,18,0.403,19,0.091,20,1.127,23,0.021,24,0.026,25,0.021,54,1.894,73,3.329,89,2.561,112,1.033,113,0.715,114,0.581,115,0.865,135,1.188,136,1.731,152,1.586,422,3.215,423,4.178,424,3.329,425,5.015,426,5.015,427,4.789,428,3.995,429,3.995,430,3.995,431,3.329,432,3.995,433,3.329,434,3.995,435,3.995]],["title/injectables/JwtStrategy.html",[83,1.827,135,0.752]],["body/injectables/JwtStrategy.html",[3,0.365,4,0.316,5,0.316,7,0.47,8,1.115,10,0.033,11,0.843,13,0.857,16,0.559,17,0.857,18,0.365,19,0.083,20,1.021,23,0.019,24,0.024,25,0.019,51,1.885,52,2.32,83,2.709,89,2.32,97,3.018,100,3.015,106,1.607,109,2.076,112,0.936,113,0.648,114,0.527,115,0.783,135,1.115,136,1.568,147,1.568,158,2.617,165,2.617,167,2.32,371,3.015,431,3.015,436,3.015,437,3.922,438,3.619,439,4.708,440,3.619,441,3.619,442,3.619,443,3.619,444,3.015,445,3.619,446,3.619,447,3.619,448,3.619,449,3.619,450,3.015,451,3.015,452,3.015,453,3.015,454,3.015,455,3.015,456,3.015,457,3.619,458,3.619]],["title/classes/MediaEntity.html",[19,0.073,65,1.375]],["body/classes/MediaEntity.html",[3,0.254,4,0.22,5,0.22,7,0.328,9,2.46,10,0.034,11,1.017,15,2.09,16,0.479,18,0.254,19,0.058,23,0.013,24,0.019,25,0.013,61,1.336,62,1.616,63,1.589,64,1.823,65,1.589,76,2.281,104,0.843,113,0.451,114,0.839,115,0.794,126,1.092,153,1.45,172,1.446,174,1.91,175,3.044,176,2.351,178,3.127,180,1.91,181,3.434,183,2.772,185,3.127,186,3.127,187,4.204,188,3.956,189,3.044,191,3.127,196,1.456,197,3.127,199,2.772,201,3.044,202,3.434,204,3.434,205,3.056,208,2.652,209,3.649,213,2.652,215,2.652,216,3.056,217,1.823,218,0.918,305,2.772,306,3.127,413,1.823,459,2.1,460,2.772,461,2.521,462,2.521,463,3.056,464,2.521,465,2.521,466,4.324,467,4.324,468,2.521,469,2.521,470,2.521,471,2.521,472,2.521,473,3.056,474,2.521,475,2.521]],["title/classes/MediaResolver.html",[19,0.073,476,2.035]],["body/classes/MediaResolver.html",[3,0.28,4,0.242,5,0.499,7,0.361,8,0.931,9,1.977,10,0.034,11,0.889,13,1.081,16,0.46,18,0.28,19,0.063,20,1.287,23,0.014,24,0.02,25,0.014,54,1.316,104,0.928,106,1.785,109,1.101,112,1.18,113,0.817,114,0.664,115,0.988,120,1.66,123,1.779,124,1.779,126,1.202,130,1.779,131,1.202,133,1.662,152,1.811,172,1.526,196,1.811,199,1.779,243,2.007,259,1.445,262,2.007,311,2.312,312,2.312,437,2.312,450,2.312,451,2.312,452,2.312,453,2.312,454,2.312,455,2.312,456,2.312,476,2.519,477,2.312,478,3.93,479,4.963,480,3.93,481,2.775,482,2.833,483,2.775,484,2.775,485,3.93,486,2.775,487,3.93,488,2.775,489,2.775,490,3.93,491,2.775,492,2.775,493,2.312,494,2.775,495,2.775,496,2.775,497,2.775,498,2.775,499,3.93,500,3.93,501,3.93,502,2.312,503,3.93,504,2.312,505,2.775,506,2.312,507,2.775,508,2.775,509,2.775,510,2.775,511,2.775,512,2.775]],["title/injectables/MediaService.html",[135,0.752,482,1.654]],["body/injectables/MediaService.html",[3,0.354,4,0.306,5,0.306,7,0.456,8,1.093,10,0.033,11,0.923,13,1.093,16,0.552,17,0.831,18,0.354,19,0.08,20,1.301,23,0.018,24,0.024,25,0.018,50,1.52,65,1.52,106,1.793,109,1.831,112,1.193,113,0.826,114,0.671,115,0.999,120,1.831,131,1.52,133,1.68,135,1.093,136,1.52,151,2.019,172,1.174,196,2.046,218,1.278,266,3.959,267,3.336,269,3.959,276,3.336,278,2.538,482,2.403,513,2.924,514,3.509,515,3.509,516,4.614,517,3.509,518,3.509,519,2.924,520,3.509,521,3.509,522,3.509]],["title/classes/Medias1612265095526.html",[19,0.073,523,2.296]],["body/classes/Medias1612265095526.html",[3,0.304,4,0.263,5,0.263,7,0.392,8,0.986,10,0.033,11,0.746,13,0.986,16,0.304,18,0.304,19,0.069,23,0.016,24,0.021,25,0.016,76,2.596,104,1.008,106,1.715,112,1.077,113,0.746,114,0.606,115,0.901,120,1.721,133,1.737,147,1.306,152,1.653,159,1.932,167,3.881,172,1.008,174,2.169,180,3.153,183,1.932,218,1.098,259,1.57,290,3.45,291,4.652,292,3.011,293,2.669,294,3.011,295,4.282,297,3.011,299,2.396,300,2.511,301,2.18,302,2.18,303,2.511,305,2.669,306,3.011,320,3.011,321,2.18,322,2.511,324,2.18,523,3.011,524,3.975,525,2.511,526,3.014,527,3.014,528,3.014,529,3.014,530,3.014,531,3.014,532,3.014,533,3.014,534,3.014,535,3.014,536,3.014,537,3.014]],["title/modules/MediasModule.html",[26,1.062,39,1.827]],["body/modules/MediasModule.html",[3,0.382,4,0.33,5,0.33,10,0.033,16,0.588,17,0.897,18,0.382,19,0.087,23,0.019,24,0.025,25,0.019,26,1.788,28,1.64,29,1.502,30,1.972,31,1.972,32,1.64,33,2.784,34,2.784,39,3.486,41,2.524,42,1.972,43,1.972,46,2.178,49,2.427,50,1.64,65,1.64,476,3.107,482,3.293,493,3.154,519,3.154,538,3.154,539,3.154,540,3.154,541,3.786,542,3.786,543,3.786]],["title/injectables/PasswordService.html",[84,1.654,135,0.752]],["body/injectables/PasswordService.html",[3,0.306,4,0.264,5,0.264,7,0.394,8,0.99,10,0.033,11,0.857,13,0.99,15,2.352,16,0.422,17,0.718,18,0.306,19,0.069,20,1.454,23,0.016,24,0.022,25,0.016,84,2.177,112,1.081,113,0.748,114,0.696,115,0.905,120,1.725,135,0.99,136,1.313,151,2.753,176,2.679,196,1.203,319,2.679,460,2.679,544,2.524,545,4.784,546,4.179,547,4.179,548,4.179,549,5.41,550,3.03,551,4.784,552,5.594,553,3.969,554,5.732,555,4.179,556,3.03,557,2.524,558,2.524,559,3.03,560,4.179,561,4.179,562,2.524,563,2.524,564,3.03,565,4.784,566,3.03,567,3.03,568,3.03]],["title/classes/UserEntity.html",[19,0.073,61,1.156]],["body/classes/UserEntity.html",[3,0.261,4,0.226,5,0.226,7,0.336,9,2.476,10,0.034,11,1.023,15,2.357,16,0.485,18,0.261,19,0.059,23,0.013,24,0.019,25,0.013,61,1.362,63,1.62,64,1.872,65,1.62,66,1.872,76,2.083,104,0.866,113,0.463,114,0.844,115,1.041,126,1.121,147,1.902,172,1.468,174,1.948,175,2.814,176,2.397,178,3.174,181,3.477,186,3.174,191,3.174,196,1.484,197,3.174,199,3.082,201,3.082,202,1.872,204,3.174,209,4.057,213,1.872,215,2.704,217,2.704,218,0.943,219,2.156,299,1.489,305,3.082,413,2.704,463,3.115,473,3.657,553,2.814,569,2.156,570,3.657,571,3.657,572,2.588,573,2.588,574,2.588,575,2.588,576,3.739,577,2.588,578,2.588,579,2.588,580,2.588,581,2.588,582,3.739,583,3.739,584,2.588,585,2.588,586,2.588,587,2.588]],["title/classes/UserResolver.html",[19,0.073,588,2.035]],["body/classes/UserResolver.html",[3,0.36,4,0.311,5,0.311,7,0.463,8,1.104,9,1.544,10,0.033,11,0.834,13,0.844,16,0.592,17,0.844,18,0.36,19,0.081,20,1.005,23,0.018,24,0.024,25,0.018,54,1.689,61,2.006,104,1.192,106,1.595,109,1.414,112,1.205,113,0.834,114,0.678,115,1.009,123,2.284,124,2.284,130,2.284,131,1.544,141,2.78,153,2.682,422,2.284,588,2.987,589,2.969,590,4.66,591,3.564,592,3.564,593,3.564,594,3.564,595,3.564,596,3.564,597,2.577,598,3.564,599,2.577,600,3.564,601,3.564,602,2.969,603,3.564,604,3.564,605,3.564,606,3.564,607,3.564]],["title/injectables/UserService.html",[135,0.752,141,1.505]],["body/injectables/UserService.html",[3,0.29,4,0.251,5,0.251,7,0.374,8,0.955,10,0.033,11,0.951,13,1.195,15,1.847,16,0.509,17,0.682,18,0.29,19,0.066,20,1.423,23,0.015,24,0.021,25,0.015,50,1.247,61,1.048,106,1.86,109,1.601,112,1.305,113,0.903,114,0.734,115,1.092,120,1.929,131,1.247,133,1.837,135,0.955,136,1.247,141,1.912,147,1.747,151,1.657,152,1.601,153,1.657,160,2.321,172,0.963,196,1.847,218,1.048,259,1.5,266,3.648,267,2.917,268,2.398,269,3.648,271,3.36,276,2.917,278,2.082,286,2.398,299,1.657,302,2.082,599,2.082,608,2.398,609,4.033,610,4.033,611,2.879,612,4.033,613,4.655,614,2.879,615,2.879,616,2.879,617,4.033,618,2.879,619,2.879,620,4.033,621,2.879,622,2.879,623,2.879,624,2.879]],["title/classes/Users1612206849026.html",[19,0.073,625,2.296]],["body/classes/Users1612206849026.html",[3,0.341,4,0.295,5,0.295,7,0.439,8,1.065,10,0.033,11,0.805,13,1.065,16,0.341,18,0.341,19,0.077,23,0.017,24,0.023,25,0.017,104,1.129,106,1.774,112,1.163,113,0.805,114,0.654,115,0.973,120,1.803,133,1.638,147,2.336,153,2.588,159,2.164,174,2.342,218,1.229,290,3.657,292,3.252,293,2.883,294,3.252,295,4.384,297,3.252,299,2.588,301,3.899,320,3.252,321,3.657,324,2.441,460,2.164,553,3.241,570,2.812,571,2.812,625,3.252,626,4.213,627,2.812,628,3.746,629,3.376,630,3.376,631,3.376,632,3.376,633,3.376]],["title/modules/UsersModule.html",[26,1.062,40,1.654]],["body/modules/UsersModule.html",[3,0.382,4,0.33,5,0.33,10,0.033,16,0.588,17,0.897,18,0.382,19,0.087,23,0.019,24,0.025,25,0.019,26,1.788,28,1.64,29,1.502,30,1.972,31,1.972,32,1.64,33,2.784,34,2.784,40,3.156,41,2.524,42,1.972,43,1.972,46,2.178,49,2.427,50,1.64,61,1.379,141,2.997,588,3.107,599,2.738,602,3.154,634,3.154,635,3.154,636,3.154,637,3.786,638,3.786,639,3.786]],["title/coverage.html",[640,3.595]],["body/coverage.html",[0,1.888,1,1.888,5,0.257,6,2.454,10,0.033,19,0.136,23,0.015,24,0.021,25,0.015,32,1.276,51,2.134,55,2.13,61,1.072,63,1.276,65,1.276,82,1.534,83,1.695,84,1.534,90,1.888,105,2.454,114,0.429,127,2.13,135,1.347,137,2.454,141,1.396,164,1.888,173,2.454,221,1.888,222,2.454,227,1.534,262,4.6,265,2.963,281,2.13,287,2.13,288,2.454,289,2.454,422,1.888,423,2.454,424,2.454,436,2.454,459,2.454,476,1.888,477,2.454,482,1.534,513,2.454,523,2.13,524,2.454,525,2.454,544,2.454,569,2.454,588,1.888,589,2.454,597,2.13,608,2.454,625,2.13,626,2.454,627,2.454,640,2.454,641,2.454,642,2.945,643,2.945,644,4.098,645,2.454,646,5.544,647,5.544,648,2.454,649,5.095,650,5.095,651,2.945,652,2.945,653,2.945,654,4.098,655,4.098,656,2.454,657,2.945,658,2.454,659,2.454,660,2.454,661,2.945,662,2.945,663,2.945,664,2.945,665,2.945,666,2.945,667,2.945]],["title/dependencies.html",[29,1.513,668,2.66]],["body/dependencies.html",[10,0.034,17,0.8,23,0.017,24,0.023,25,0.017,29,1.34,50,1.462,54,1.6,72,4.213,87,2.441,89,2.164,97,2.164,114,0.491,189,2.164,218,1.229,444,3.746,504,2.812,562,2.812,669,3.376,670,5.988,671,3.376,672,3.376,673,3.376,674,3.376,675,4.497,676,3.746,677,3.376,678,3.376,679,5.392,680,3.376,681,3.376,682,3.376,683,4.497,684,4.497,685,3.746,686,5.057,687,2.812,688,3.376,689,4.497,690,3.252,691,3.376,692,3.376,693,3.376,694,3.376,695,3.376,696,3.376,697,3.376,698,2.812,699,3.376,700,3.376,701,3.376,702,3.376,703,3.376,704,3.376,705,3.376,706,3.376,707,3.376,708,3.376,709,3.376,710,3.376,711,3.376,712,3.376,713,3.376]],["title/miscellaneous/functions.html",[714,1.705,715,3.177]],["body/miscellaneous/functions.html",[7,0.62,10,0.029,23,0.025,24,0.029,25,0.025,32,2.565,660,3.975,690,3.451,714,3.059,715,3.975,716,4.772,717,3.451,718,4.772,719,3.451,720,3.975]],["title/index.html",[7,0.346,720,2.216,721,2.66]],["body/index.html",[4,0.189,10,0.026,23,0.011,24,0.017,25,0.011,29,0.861,164,2.104,179,3.605,184,2.373,236,1.808,293,1.391,319,2.104,404,1.808,502,4.441,506,3.948,563,1.808,641,3.297,685,1.808,687,1.808,690,2.373,698,2.734,717,1.569,719,2.862,722,1.808,723,4.413,724,2.373,725,3.958,726,2.17,727,3.958,728,5.991,729,2.17,730,2.17,731,3.282,732,2.17,733,2.17,734,2.17,735,2.17,736,2.17,737,2.17,738,2.17,739,2.17,740,2.17,741,3.958,742,2.17,743,3.282,744,4.739,745,2.17,746,3.282,747,2.17,748,4.985,749,2.17,750,2.17,751,4.739,752,2.17,753,4.413,754,2.17,755,3.958,756,5.177,757,3.282,758,2.17,759,2.17,760,2.17,761,5.795,762,2.17,763,2.17,764,2.17,765,3.282,766,2.17,767,2.17,768,2.17,769,2.17,770,2.17,771,2.17,772,2.17,773,2.17,774,5.177,775,3.282,776,5.563,777,3.958,778,2.17,779,5.177,780,3.958,781,3.282,782,2.17,783,2.17,784,2.17,785,3.282,786,2.17,787,2.17,788,2.17,789,2.17,790,2.17,791,2.17,792,2.17,793,2.17,794,2.17,795,2.17,796,2.17,797,3.958,798,2.17,799,3.958,800,2.17,801,3.958,802,2.17,803,2.17,804,2.17,805,2.17,806,2.17,807,2.17,808,2.17,809,3.282,810,3.958,811,4.985,812,4.413,813,3.282,814,2.17,815,2.17,816,3.282,817,2.17,818,2.17,819,2.17,820,2.17,821,2.17,822,3.282,823,2.17,824,2.17,825,2.17,826,3.282,827,3.282,828,3.958,829,2.17,830,2.17,831,2.17,832,2.17,833,2.17,834,2.17,835,2.17,836,3.282,837,2.17,838,2.17,839,2.17,840,2.17,841,2.17,842,2.17,843,2.17,844,2.17,845,2.17,846,2.17,847,2.17,848,2.17,849,2.17,850,2.17,851,2.17,852,2.17,853,2.17,854,2.17,855,2.17,856,2.17]],["title/modules.html",[28,1.869]],["body/modules.html",[10,0.028,23,0.023,24,0.028,25,0.023,27,2.903,28,1.962,37,2.606,38,2.606,39,2.606,40,2.359,676,5.111,857,6.135,858,6.135,859,6.135]],["title/overview.html",[860,3.595]],["body/overview.html",[0,2.097,10,0.033,23,0.017,24,0.023,25,0.017,26,1.094,27,3.903,28,1.417,29,1.298,30,1.704,31,1.704,32,1.417,33,1.704,34,1.704,35,2.725,36,2.725,37,3.56,38,3.293,39,3.293,40,3.046,41,2.293,42,1.704,43,1.704,78,2.725,80,2.725,81,2.725,82,3.046,83,2.864,84,2.592,104,1.094,136,1.417,141,2.773,227,3.046,259,1.704,314,2.725,316,2.725,319,2.097,416,2.725,417,2.725,418,2.725,482,3.046,538,2.725,539,2.725,540,2.725,634,2.725,635,2.725,636,2.725,860,2.725]],["title/miscellaneous/variables.html",[714,1.705,861,3.177]],["body/miscellaneous/variables.html",[7,0.334,10,0.034,15,1.477,20,1.495,23,0.013,24,0.019,25,0.013,51,2.496,55,2.691,69,2.142,76,1.894,97,2.385,102,2.691,113,0.46,114,0.796,127,2.691,147,1.894,152,1.02,158,3.162,160,3.147,164,2.803,180,1.339,189,1.648,243,1.859,265,1.859,273,2.142,281,2.691,282,2.142,427,3.1,433,3.643,460,1.648,553,2.803,557,4.417,558,4.754,597,2.691,628,2.142,645,2.142,648,2.142,656,2.142,658,2.142,659,2.142,714,1.648,717,2.691,722,2.142,724,1.859,861,2.142,862,2.571,863,2.571,864,2.571,865,2.571,866,2.571,867,2.571,868,3.721,869,3.721,870,4.373,871,3.721,872,3.721,873,3.721,874,3.721,875,3.721,876,3.721,877,3.721,878,3.721,879,3.721,880,2.571,881,2.571,882,2.571,883,2.571,884,2.571,885,2.571,886,2.571,887,3.721,888,2.571,889,2.571,890,2.571,891,2.571,892,2.571,893,4.793,894,2.571,895,2.571,896,2.571,897,2.571,898,2.571,899,3.721,900,2.571,901,2.571,902,2.571,903,2.571,904,2.571,905,2.571,906,2.571,907,2.571,908,2.571,909,2.571,910,2.571,911,2.571,912,2.571,913,2.571]],["title/additional-documentation/backend-api.html",[719,1.655,724,1.655,914,2.289,915,2.289]],["body/additional-documentation/backend-api.html",[10,0.032,23,0.025,24,0.029,25,0.025,916,4.914,917,4.914,918,4.914]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/backend-api.html":{}}}],["0",{"_index":262,"title":{},"body":{"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"coverage.html":{}}}],["0.1.13",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["0.2.30",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["00:00:00.000000",{"_index":334,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["01",{"_index":382,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["03",{"_index":360,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["04",{"_index":361,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["07",{"_index":332,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["08",{"_index":359,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["09",{"_index":381,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["1",{"_index":259,"title":{},"body":{"classes/EventResolver.html":{},"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{},"classes/Medias1612265095526.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["1.webp",{"_index":528,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["1/1",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":319,"title":{},"body":{"classes/Events1612265244438.html":{},"injectables/PasswordService.html":{},"index.html":{},"overview.html":{}}}],["10.jpg",{"_index":537,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["100",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["11.2.6",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["123456",{"_index":628,"title":{},"body":{"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["13",{"_index":333,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["14",{"_index":335,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["15",{"_index":390,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["15.5.0",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["15000000",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19",{"_index":394,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["2",{"_index":311,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{}}}],["2.0.0",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["2.19.2",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["2.jpg",{"_index":529,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["2013",{"_index":365,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["2019",{"_index":331,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["2019.\",\"ru",{"_index":406,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["21",{"_index":395,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["24",{"_index":349,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["25",{"_index":375,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["26",{"_index":352,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["27",{"_index":353,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["2b$10$a4x21zzo7iku59scznozee7ndo1mxcdxkaz8h3oti65d7qrpdatto",{"_index":633,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["3",{"_index":312,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{}}}],["3.0.0",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["3.4.0",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["3.webp",{"_index":530,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["3/4",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":380,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["33",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":313,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["4.0.0",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["4.webp",{"_index":531,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["5",{"_index":314,"title":{},"body":{"classes/Events1612265244438.html":{},"overview.html":{}}}],["5.0.0",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["5.webp",{"_index":532,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["50",{"_index":582,"title":{},"body":{"classes/UserEntity.html":{}}}],["5433",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":315,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["6.6.3",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["6.jpg",{"_index":533,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["7",{"_index":316,"title":{},"body":{"classes/Events1612265244438.html":{},"overview.html":{}}}],["7.0.2",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["7.6.9",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["7.9.8",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["7.webp",{"_index":534,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["75",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":317,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["8.5.1",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["8.jpg",{"_index":535,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["9",{"_index":318,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["9.jpg",{"_index":536,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["9231002233",{"_index":632,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["above",{"_index":781,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":502,"title":{},"body":{"classes/MediaResolver.html":{},"index.html":{}}}],["adding",{"_index":740,"title":{},"body":{"index.html":{}}}],["additional",{"_index":914,"title":{"additional-documentation/backend-api.html":{}},"body":{}}],["admin",{"_index":301,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["advanced",{"_index":848,"title":{},"body":{"index.html":{}}}],["advantage",{"_index":841,"title":{},"body":{"index.html":{}}}],["affected",{"_index":816,"title":{},"body":{"index.html":{}}}],["affected:e2e",{"_index":819,"title":{},"body":{"index.html":{}}}],["affected:test",{"_index":815,"title":{},"body":{"index.html":{}}}],["alongside",{"_index":846,"title":{},"body":{"index.html":{}}}],["alpha.3",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["always",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["america",{"_index":339,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["american",{"_index":373,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["angular",{"_index":760,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":724,"title":{"additional-documentation/backend-api.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apollo",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":779,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":775,"title":{},"body":{"index.html":{}}}],["applications",{"_index":748,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":27,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":347,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["apps/.../app.resolver.ts",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../event.service.ts",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/app.controller.ts:7",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/backend/api/src/app/app.module.ts",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/backend/api/src/app/app.resolver.ts",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/auth.module.ts",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/backend/api/src/app/auth/decorators/auth.decorator.ts",{"_index":648,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:13",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:18",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:9",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:12",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:19",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:33",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts",{"_index":436,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:18",{"_index":440,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:8",{"_index":438,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts",{"_index":544,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:10",{"_index":559,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:16",{"_index":556,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:25",{"_index":550,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts",{"_index":173,"title":{},"body":{"classes/EventEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:13",{"_index":190,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:16",{"_index":192,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:19",{"_index":195,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:22",{"_index":198,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:31",{"_index":203,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:34",{"_index":206,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:37",{"_index":207,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:40",{"_index":210,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:43",{"_index":211,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:46",{"_index":212,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/entities/event.entity.ts:49",{"_index":214,"title":{},"body":{"classes/EventEntity.html":{}}}],["apps/backend/api/src/app/events/events.module.ts",{"_index":419,"title":{},"body":{"modules/EventsModule.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts",{"_index":222,"title":{},"body":{"classes/EventResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts:12",{"_index":240,"title":{},"body":{"classes/EventResolver.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts:28",{"_index":231,"title":{},"body":{"classes/EventResolver.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts:33",{"_index":233,"title":{},"body":{"classes/EventResolver.html":{}}}],["apps/backend/api/src/app/events/resolvers/event.resolver.ts:8",{"_index":228,"title":{},"body":{"classes/EventResolver.html":{}}}],["apps/backend/api/src/app/events/services/event.service.ts",{"_index":265,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/events/services/event.service.ts:14",{"_index":270,"title":{},"body":{"injectables/EventService.html":{}}}],["apps/backend/api/src/app/events/services/event.service.ts:20",{"_index":274,"title":{},"body":{"injectables/EventService.html":{}}}],["apps/backend/api/src/app/events/services/event.service.ts:25",{"_index":277,"title":{},"body":{"injectables/EventService.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts",{"_index":459,"title":{},"body":{"classes/MediaEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:21",{"_index":461,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:24",{"_index":462,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:27",{"_index":465,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:36",{"_index":464,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:53",{"_index":468,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:57",{"_index":469,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:60",{"_index":470,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:63",{"_index":471,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/entities/media.entity.ts:66",{"_index":472,"title":{},"body":{"classes/MediaEntity.html":{}}}],["apps/backend/api/src/app/media/medias.module.ts",{"_index":541,"title":{},"body":{"modules/MediasModule.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts",{"_index":477,"title":{},"body":{"classes/MediaResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts:12",{"_index":488,"title":{},"body":{"classes/MediaResolver.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts:17",{"_index":486,"title":{},"body":{"classes/MediaResolver.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts:23",{"_index":491,"title":{},"body":{"classes/MediaResolver.html":{}}}],["apps/backend/api/src/app/media/resolvers/media.resolver.ts:8",{"_index":483,"title":{},"body":{"classes/MediaResolver.html":{}}}],["apps/backend/api/src/app/media/services/media.service.ts",{"_index":513,"title":{},"body":{"injectables/MediaService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/media/services/media.service.ts:14",{"_index":517,"title":{},"body":{"injectables/MediaService.html":{}}}],["apps/backend/api/src/app/media/services/media.service.ts:18",{"_index":518,"title":{},"body":{"injectables/MediaService.html":{}}}],["apps/backend/api/src/app/media/services/media.service.ts:8",{"_index":515,"title":{},"body":{"injectables/MediaService.html":{}}}],["apps/backend/api/src/app/users/decorators/user.decorator.ts",{"_index":656,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts",{"_index":569,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:13",{"_index":575,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:16",{"_index":573,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:25",{"_index":574,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:35",{"_index":577,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:38",{"_index":579,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:41",{"_index":578,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:44",{"_index":584,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:47",{"_index":572,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:50",{"_index":580,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/guards/gql.auth",{"_index":423,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts",{"_index":589,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:10",{"_index":592,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:15",{"_index":595,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts",{"_index":608,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:14",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:18",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:24",{"_index":614,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:30",{"_index":616,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:8",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/users.module.ts",{"_index":637,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/backend/api/src/environments/environment.prod.ts",{"_index":658,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/environments/environment.ts",{"_index":659,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/main.ts",{"_index":660,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apps/backend/api/src/migrations/1612206849026",{"_index":626,"title":{},"body":{"classes/Users1612206849026.html":{},"coverage.html":{}}}],["apps/backend/api/src/migrations/1612265095526",{"_index":524,"title":{},"body":{"classes/Medias1612265095526.html":{},"coverage.html":{}}}],["apps/backend/api/src/migrations/1612265244438",{"_index":288,"title":{},"body":{"classes/Events1612265244438.html":{},"coverage.html":{}}}],["args",{"_index":243,"title":{},"body":{"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"miscellaneous/variables.html":{}}}],["args('excludefirst",{"_index":249,"title":{},"body":{"classes/EventResolver.html":{}}}],["args('excludelast",{"_index":250,"title":{},"body":{"classes/EventResolver.html":{}}}],["args('limit",{"_index":247,"title":{},"body":{"classes/EventResolver.html":{}}}],["args('offset",{"_index":246,"title":{},"body":{"classes/EventResolver.html":{}}}],["args('order",{"_index":248,"title":{},"body":{"classes/EventResolver.html":{}}}],["args.password",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artifacts",{"_index":803,"title":{},"body":{"index.html":{}}}],["asia",{"_index":367,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["ast",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["aurora",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth/auth.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":430,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":432,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":37,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authresolver",{"_index":90,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":795,"title":{},"body":{"index.html":{}}}],["await",{"_index":133,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["backend",{"_index":719,"title":{"additional-documentation/backend-api.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["backend/api",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["bcrypt",{"_index":562,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["below",{"_index":758,"title":{},"body":{"index.html":{}}}],["body",{"_index":177,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/MediaEntity.html":{}}}],["bootstrap",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":854,"title":{},"body":{"index.html":{}}}],["browse",{"_index":859,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":676,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":756,"title":{},"body":{"index.html":{}}}],["building",{"_index":842,"title":{},"body":{"index.html":{}}}],["californian",{"_index":328,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["capabilities",{"_index":741,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":467,"title":{},"body":{"classes/MediaEntity.html":{}}}],["championship",{"_index":366,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["change",{"_index":797,"title":{},"body":{"index.html":{}}}],["circuit",{"_index":379,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["class",{"_index":19,"title":{"classes/AuthResolver.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"classes/Users1612206849026.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":104,"title":{},"body":{"classes/AuthResolver.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"classes/Users1612206849026.html":{},"overview.html":{}}}],["cli",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud",{"_index":506,"title":{},"body":{"classes/MediaResolver.html":{},"index.html":{}}}],["cluster_appmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":416,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":417,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_providers",{"_index":418,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_mediasmodule",{"_index":538,"title":{},"body":{"modules/MediasModule.html":{},"overview.html":{}}}],["cluster_mediasmodule_exports",{"_index":539,"title":{},"body":{"modules/MediasModule.html":{},"overview.html":{}}}],["cluster_mediasmodule_providers",{"_index":540,"title":{},"body":{"modules/MediasModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":634,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":635,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":636,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":799,"title":{},"body":{"index.html":{}}}],["column",{"_index":209,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["column('simple",{"_index":188,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["column({length",{"_index":581,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({type",{"_index":193,"title":{},"body":{"classes/EventEntity.html":{}}}],["community",{"_index":773,"title":{},"body":{"index.html":{}}}],["compare",{"_index":551,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":568,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":546,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":548,"title":{},"body":{"injectables/PasswordService.html":{}}}],["component",{"_index":801,"title":{},"body":{"index.html":{}}}],["computation",{"_index":829,"title":{},"body":{"index.html":{}}}],["concorso",{"_index":398,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["connect",{"_index":837,"title":{},"body":{"index.html":{}}}],["connection",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"classes/MediaResolver.html":{},"classes/Medias1612265095526.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(eventservice",{"_index":226,"title":{},"body":{"classes/EventResolver.html":{}}}],["constructor(jwtservice",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(mediarepository",{"_index":514,"title":{},"body":{"injectables/MediaService.html":{}}}],["constructor(mediaservice",{"_index":481,"title":{},"body":{"classes/MediaResolver.html":{}}}],["constructor(private",{"_index":130,"title":{},"body":{"classes/AuthResolver.html":{},"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"classes/UserResolver.html":{}}}],["constructor(userrepository",{"_index":268,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":591,"title":{},"body":{"classes/UserResolver.html":{}}}],["contents",{"_index":505,"title":{},"body":{"classes/MediaResolver.html":{}}}],["context",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["core",{"_index":759,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":640,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":782,"title":{},"body":{"index.html":{}}}],["created",{"_index":178,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["createdatecolumn",{"_index":191,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["createparamdecorator((data",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":612,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":433,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":435,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["currentuser",{"_index":597,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cypress",{"_index":818,"title":{},"body":{"index.html":{}}}],["data",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":511,"title":{},"body":{"classes/MediaResolver.html":{}}}],["db/migrations",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["de",{"_index":409,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["declarations",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":128,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":598,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":557,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["deleganza",{"_index":399,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["delete",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["dep",{"_index":821,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":29,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":850,"title":{},"body":{"index.html":{}}}],["description",{"_index":460,"title":{},"body":{"classes/MediaEntity.html":{},"injectables/PasswordService.html":{},"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["design",{"_index":397,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["dev",{"_index":731,"title":{},"body":{"index.html":{}}}],["developers",{"_index":856,"title":{},"body":{"index.html":{}}}],["developing",{"_index":745,"title":{},"body":{"index.html":{}}}],["development",{"_index":791,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":754,"title":{},"body":{"index.html":{}}}],["diagram",{"_index":823,"title":{},"body":{"index.html":{}}}],["different",{"_index":746,"title":{},"body":{"index.html":{}}}],["directory",{"_index":806,"title":{},"body":{"index.html":{}}}],["disable",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["dist",{"_index":805,"title":{},"body":{"index.html":{}}}],["dist/apps/backend/api/migrations/*{.ts",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/apps/backend/api/src/**/*.entity{.ts",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":641,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["down",{"_index":292,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["down(queryrunner",{"_index":294,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["dropschema",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":817,"title":{},"body":{"index.html":{}}}],["email",{"_index":570,"title":{},"body":{"classes/UserEntity.html":{},"classes/Users1612206849026.html":{}}}],["en\":\"a",{"_index":345,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"competition",{"_index":325,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"elkhart",{"_index":357,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"following",{"_index":363,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"for",{"_index":402,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"lamborghini",{"_index":396,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"no",{"_index":392,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"round",{"_index":341,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"super",{"_index":336,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"the",{"_index":370,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["en\":\"world",{"_index":415,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["enable",{"_index":832,"title":{},"body":{"index.html":{}}}],["encoding",{"_index":501,"title":{},"body":{"classes/MediaResolver.html":{}}}],["end",{"_index":179,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"index.html":{}}}],["entities",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["entities/event.entity",{"_index":280,"title":{},"body":{"injectables/EventService.html":{},"modules/EventsModule.html":{}}}],["entities/media.entity",{"_index":519,"title":{},"body":{"injectables/MediaService.html":{},"modules/MediasModule.html":{}}}],["entities/user.entity",{"_index":599,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":215,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["entityserviceoptions",{"_index":273,"title":{},"body":{"injectables/EventService.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.connection",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["eslint",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["eslint/no",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["etc",{"_index":752,"title":{},"body":{"index.html":{}}}],["europe",{"_index":354,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["even",{"_index":835,"title":{},"body":{"index.html":{}}}],["event",{"_index":413,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["event.image",{"_index":474,"title":{},"body":{"classes/MediaEntity.html":{}}}],["event.owner",{"_index":585,"title":{},"body":{"classes/UserEntity.html":{}}}],["evententity",{"_index":63,"title":{"classes/EventEntity.html":{}},"body":{"modules/AppModule.html":{},"classes/EventEntity.html":{},"injectables/EventService.html":{},"modules/EventsModule.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["eventresolver",{"_index":221,"title":{"classes/EventResolver.html":{}},"body":{"classes/EventResolver.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["events",{"_index":201,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["events.ts",{"_index":289,"title":{},"body":{"classes/Events1612265244438.html":{},"coverage.html":{}}}],["events.ts:5",{"_index":298,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["events.ts:73",{"_index":296,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["events/entities/event.entity",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["events/events.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["events1612265244438",{"_index":287,"title":{"classes/Events1612265244438.html":{}},"body":{"classes/Events1612265244438.html":{},"coverage.html":{}}}],["eventservice",{"_index":227,"title":{"injectables/EventService.html":{}},"body":{"classes/EventResolver.html":{},"injectables/EventService.html":{},"modules/EventsModule.html":{},"coverage.html":{},"overview.html":{}}}],["eventserviceoptions",{"_index":281,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["eventsmodule",{"_index":38,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["example@example.com",{"_index":631,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["excludefirst",{"_index":237,"title":{},"body":{"classes/EventResolver.html":{}}}],["excludelast",{"_index":238,"title":{},"body":{"classes/EventResolver.html":{}}}],["execute",{"_index":812,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":427,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["experience",{"_index":853,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["explicit",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["export",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":685,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extendoptions",{"_index":279,"title":{},"body":{"injectables/EventService.html":{}}}],["extendoptions(eventserviceoptions",{"_index":284,"title":{},"body":{"injectables/EventService.html":{}}}],["extends",{"_index":431,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensible",{"_index":730,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":442,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":447,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["famous",{"_index":348,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["fastify",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["features",{"_index":737,"title":{},"body":{"index.html":{}}}],["fifth",{"_index":326,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["filename",{"_index":499,"title":{},"body":{"classes/MediaResolver.html":{}}}],["files",{"_index":798,"title":{},"body":{"index.html":{}}}],["final",{"_index":405,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["find",{"_index":266,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["find(options",{"_index":272,"title":{},"body":{"injectables/EventService.html":{}}}],["findone",{"_index":267,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["findone(id",{"_index":276,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["findonebyusername",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":617,"title":{},"body":{"injectables/UserService.html":{}}}],["finishresult",{"_index":255,"title":{},"body":{"classes/EventResolver.html":{}}}],["finishresult.slice(0",{"_index":258,"title":{},"body":{"classes/EventResolver.html":{}}}],["first",{"_index":403,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["flag",{"_index":808,"title":{},"body":{"index.html":{}}}],["format",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":765,"title":{},"body":{"index.html":{}}}],["francorchamps",{"_index":356,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["frontend",{"_index":855,"title":{},"body":{"index.html":{}}}],["frontends",{"_index":766,"title":{},"body":{"index.html":{}}}],["frontera",{"_index":411,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["full",{"_index":843,"title":{},"body":{"index.html":{}}}],["function",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":715,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":824,"title":{},"body":{"index.html":{}}}],["g",{"_index":777,"title":{},"body":{"index.html":{}}}],["gain",{"_index":840,"title":{},"body":{"index.html":{}}}],["generate",{"_index":774,"title":{},"body":{"index.html":{}}}],["generated",{"_index":726,"title":{},"body":{"index.html":{}}}],["generating",{"_index":750,"title":{},"body":{"index.html":{}}}],["generation",{"_index":849,"title":{},"body":{"index.html":{}}}],["getevent",{"_index":223,"title":{},"body":{"classes/EventResolver.html":{}}}],["getevent(@args('id",{"_index":260,"title":{},"body":{"classes/EventResolver.html":{}}}],["getevent(id",{"_index":229,"title":{},"body":{"classes/EventResolver.html":{}}}],["geteventlast",{"_index":224,"title":{},"body":{"classes/EventResolver.html":{}}}],["getevents",{"_index":225,"title":{},"body":{"classes/EventResolver.html":{}}}],["getevents(offset",{"_index":234,"title":{},"body":{"classes/EventResolver.html":{}}}],["gethash",{"_index":547,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":555,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getmedia",{"_index":478,"title":{},"body":{"classes/MediaResolver.html":{}}}],["getmedia(@args('id",{"_index":496,"title":{},"body":{"classes/MediaResolver.html":{}}}],["getmedia(id",{"_index":484,"title":{},"body":{"classes/MediaResolver.html":{}}}],["getmedias",{"_index":479,"title":{},"body":{"classes/MediaResolver.html":{}}}],["getrequest",{"_index":425,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":426,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":721,"title":{"index.html":{}},"body":{}}],["gfdfhfjdjd",{"_index":918,"title":{},"body":{"additional-documentation/backend-api.html":{}}}],["gp",{"_index":385,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["gqlauthguard",{"_index":422,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":429,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":434,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["graph",{"_index":822,"title":{},"body":{"index.html":{}}}],["graphql",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["graphqljson",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":601,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":424,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:7",{"_index":428,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":600,"title":{},"body":{"classes/UserResolver.html":{}}}],["hash",{"_index":554,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":566,"title":{},"body":{"injectables/PasswordService.html":{}}}],["help",{"_index":825,"title":{},"body":{"index.html":{}}}],["historic",{"_index":346,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["host",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hours",{"_index":350,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["http://localhost:4200",{"_index":794,"title":{},"body":{"index.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":564,"title":{},"body":{"injectables/PasswordService.html":{}}}],["https://nodejs.org/api/stream.html",{"_index":508,"title":{},"body":{"classes/MediaResolver.html":{}}}],["id",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["ievent",{"_index":175,"title":{},"body":{"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["ignoreexpiration",{"_index":448,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ilocale",{"_index":187,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["image",{"_index":180,"title":{},"body":{"classes/EventEntity.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{},"miscellaneous/variables.html":{}}}],["image.id",{"_index":310,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imageid",{"_index":323,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["images",{"_index":304,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["images.length",{"_index":308,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["images.map(image",{"_index":309,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids",{"_index":307,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[0",{"_index":344,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[1",{"_index":362,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[2",{"_index":369,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[3",{"_index":378,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[4",{"_index":384,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[5",{"_index":389,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[6",{"_index":391,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[7",{"_index":401,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imagesids[8",{"_index":412,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["imedia",{"_index":199,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/UserEntity.html":{}}}],["implements",{"_index":174,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"classes/Users1612206849026.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{}}}],["imported",{"_index":789,"title":{},"body":{"index.html":{}}}],["imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":749,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{}}}],["inje",{"_index":364,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["injectable",{"_index":135,"title":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":278,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["injectrepository(evententity",{"_index":283,"title":{},"body":{"injectables/EventService.html":{}}}],["injectrepository(mediaentity",{"_index":520,"title":{},"body":{"injectables/MediaService.html":{}}}],["injectrepository(userentity",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["insert",{"_index":321,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["instantly",{"_index":839,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":738,"title":{},"body":{"index.html":{}}}],["international",{"_index":377,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["isvalid",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["iuser",{"_index":204,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["jerez",{"_index":408,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["jest",{"_index":814,"title":{},"body":{"index.html":{}}}],["js",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":189,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["json.parse('{\"id\":\"desc",{"_index":263,"title":{},"body":{"classes/EventResolver.html":{}}}],["json.parse(order",{"_index":254,"title":{},"body":{"classes/EventResolver.html":{}}}],["jwt",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":446,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":83,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind.string",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["la",{"_index":410,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["laguna",{"_index":342,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["lake",{"_index":358,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["lamborghini",{"_index":351,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["learn",{"_index":827,"title":{},"body":{"index.html":{}}}],["legend",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":587,"title":{},"body":{"classes/UserEntity.html":{}}}],["lib",{"_index":787,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":751,"title":{},"body":{"index.html":{}}}],["library",{"_index":785,"title":{},"body":{"index.html":{}}}],["limit",{"_index":235,"title":{},"body":{"classes/EventResolver.html":{}}}],["line",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["localhost",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(@signin",{"_index":132,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(signinpayload",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{}}}],["many",{"_index":743,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":216,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["manytoone('mediaentity",{"_index":200,"title":{},"body":{"classes/EventEntity.html":{}}}],["manytoone('userentity",{"_index":205,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["matching",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/backend-api.html":{}}}],["media",{"_index":219,"title":{},"body":{"classes/EventEntity.html":{},"classes/UserEntity.html":{}}}],["media.events",{"_index":220,"title":{},"body":{"classes/EventEntity.html":{}}}],["media.owner",{"_index":586,"title":{},"body":{"classes/UserEntity.html":{}}}],["media/entities/media.entity",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"classes/EventEntity.html":{},"classes/UserEntity.html":{}}}],["media/medias.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["mediaentity",{"_index":65,"title":{"classes/MediaEntity.html":{}},"body":{"modules/AppModule.html":{},"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"injectables/MediaService.html":{},"modules/MediasModule.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["mediarepository",{"_index":516,"title":{},"body":{"injectables/MediaService.html":{}}}],["mediaresolver",{"_index":476,"title":{"classes/MediaResolver.html":{}},"body":{"classes/MediaResolver.html":{},"modules/MediasModule.html":{},"coverage.html":{}}}],["medias",{"_index":305,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{}}}],["medias.ts",{"_index":525,"title":{},"body":{"classes/Medias1612265095526.html":{},"coverage.html":{}}}],["medias.ts:16",{"_index":526,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["medias.ts:4",{"_index":527,"title":{},"body":{"classes/Medias1612265095526.html":{}}}],["medias1612265095526",{"_index":523,"title":{"classes/Medias1612265095526.html":{}},"body":{"classes/Medias1612265095526.html":{},"coverage.html":{}}}],["mediaservice",{"_index":482,"title":{"injectables/MediaService.html":{}},"body":{"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"modules/MediasModule.html":{},"coverage.html":{},"overview.html":{}}}],["mediasmodule",{"_index":39,"title":{"modules/MediasModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MediasModule.html":{},"modules.html":{},"overview.html":{}}}],["memoization",{"_index":830,"title":{},"body":{"index.html":{}}}],["message",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":504,"title":{},"body":{"classes/MediaResolver.html":{},"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["migrationinterface",{"_index":290,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["migrations",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mimetype",{"_index":500,"title":{},"body":{"classes/MediaResolver.html":{}}}],["minimal",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["minute",{"_index":734,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":714,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":26,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":28,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["monorepos",{"_index":732,"title":{},"body":{"index.html":{}}}],["more",{"_index":828,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":783,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":492,"title":{},"body":{"classes/MediaResolver.html":{}}}],["mutation('singleupload",{"_index":490,"title":{},"body":{"classes/MediaResolver.html":{}}}],["myjwtsecret",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":793,"title":{},"body":{"index.html":{}}}],["nest",{"_index":768,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/EventResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/MediaResolver.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/EventService.html":{},"modules/EventsModule.html":{},"injectables/MediaService.html":{},"modules/MediasModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["nfsdlsbnj;asdbnj;bs",{"_index":917,"title":{},"body":{"additional-documentation/backend-api.html":{}}}],["ng",{"_index":761,"title":{},"body":{"index.html":{}}}],["node",{"_index":771,"title":{},"body":{"index.html":{}}}],["north",{"_index":338,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["nrwl/angular",{"_index":687,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nrwl/angular:app",{"_index":778,"title":{},"body":{"index.html":{}}}],["nrwl/angular:lib",{"_index":786,"title":{},"body":{"index.html":{}}}],["nrwl/express",{"_index":770,"title":{},"body":{"index.html":{}}}],["nrwl/nest",{"_index":769,"title":{},"body":{"index.html":{}}}],["nrwl/node",{"_index":772,"title":{},"body":{"index.html":{}}}],["nrwl/react",{"_index":763,"title":{},"body":{"index.html":{}}}],["nrwl/web",{"_index":767,"title":{},"body":{"index.html":{}}}],["null",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventResolver.html":{},"classes/Events1612265244438.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":202,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["number",{"_index":196,"title":{},"body":{"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["nx",{"_index":728,"title":{},"body":{"index.html":{}}}],["nx’s",{"_index":847,"title":{},"body":{"index.html":{}}}],["nürburgring",{"_index":388,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["object",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offset",{"_index":241,"title":{},"body":{"classes/EventResolver.html":{}}}],["ondelete",{"_index":466,"title":{},"body":{"classes/MediaEntity.html":{}}}],["onetomany",{"_index":473,"title":{},"body":{"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["onetomany('evententity",{"_index":463,"title":{},"body":{"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["onetomany('mediaentity",{"_index":576,"title":{},"body":{"classes/UserEntity.html":{}}}],["optional",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["options",{"_index":275,"title":{},"body":{"injectables/EventService.html":{}}}],["order",{"_index":236,"title":{},"body":{"classes/EventResolver.html":{},"index.html":{}}}],["out",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":860,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":181,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["ownerid",{"_index":322,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{}}}],["package",{"_index":668,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":915,"title":{"additional-documentation/backend-api.html":{}},"body":{}}],["pairs",{"_index":831,"title":{},"body":{"index.html":{}}}],["param",{"_index":565,"title":{},"body":{"injectables/PasswordService.html":{}}}],["parameters",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["parseliteral(ast",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":613,"title":{},"body":{"injectables/UserService.html":{}}}],["pass",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":444,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":441,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":445,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":553,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":549,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":84,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["payload",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":457,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":458,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":571,"title":{},"body":{"classes/UserEntity.html":{},"classes/Users1612206849026.html":{}}}],["place",{"_index":182,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{}}}],["plain",{"_index":552,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["plugins",{"_index":744,"title":{},"body":{"index.html":{}}}],["plus",{"_index":851,"title":{},"body":{"index.html":{}}}],["port",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgres",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preferred",{"_index":845,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":197,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["private",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["prod",{"_index":807,"title":{},"body":{"index.html":{}}}],["production",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":725,"title":{},"body":{"index.html":{}}}],["project=my",{"_index":802,"title":{},"body":{"index.html":{}}}],["projects",{"_index":757,"title":{},"body":{"index.html":{}}}],["promise",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["properties",{"_index":176,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":291,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{}}}],["published",{"_index":183,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{}}}],["query",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"classes/UserResolver.html":{}}}],["query('event",{"_index":230,"title":{},"body":{"classes/EventResolver.html":{}}}],["query('eventlast",{"_index":232,"title":{},"body":{"classes/EventResolver.html":{}}}],["query('events",{"_index":239,"title":{},"body":{"classes/EventResolver.html":{}}}],["query('login",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('media",{"_index":485,"title":{},"body":{"classes/MediaResolver.html":{}}}],["query('medias",{"_index":487,"title":{},"body":{"classes/MediaResolver.html":{}}}],["query('user",{"_index":604,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":594,"title":{},"body":{"classes/UserResolver.html":{}}}],["queryrunner",{"_index":295,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["queryrunner.query",{"_index":320,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["queryrunner.query(`select",{"_index":300,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{}}}],["quick",{"_index":733,"title":{},"body":{"index.html":{}}}],["raceway",{"_index":329,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["rapidly",{"_index":833,"title":{},"body":{"index.html":{}}}],["react",{"_index":762,"title":{},"body":{"index.html":{}}}],["readme",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["readonly",{"_index":131,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["record",{"_index":509,"title":{},"body":{"classes/MediaResolver.html":{}}}],["recordfile",{"_index":512,"title":{},"body":{"classes/MediaResolver.html":{}}}],["reflect",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":282,"title":{},"body":{"injectables/EventService.html":{},"miscellaneous/variables.html":{}}}],["reload",{"_index":796,"title":{},"body":{"index.html":{}}}],["repository",{"_index":269,"title":{},"body":{"injectables/EventService.html":{},"injectables/MediaService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolver",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{},"classes/EventResolver.html":{},"classes/MediaResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":129,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('event",{"_index":245,"title":{},"body":{"classes/EventResolver.html":{}}}],["resolver('media",{"_index":494,"title":{},"body":{"classes/MediaResolver.html":{}}}],["resolver('user",{"_index":603,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/event.resolver",{"_index":420,"title":{},"body":{"modules/EventsModule.html":{}}}],["resolvers/media.resolver",{"_index":542,"title":{},"body":{"modules/MediasModule.html":{}}}],["resolvers/user.resolver",{"_index":638,"title":{},"body":{"modules/UsersModule.html":{}}}],["result",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/backend-api.html":{}}}],["result.length",{"_index":257,"title":{},"body":{"classes/EventResolver.html":{}}}],["result.slice(1",{"_index":256,"title":{},"body":{"classes/EventResolver.html":{}}}],["result[0",{"_index":264,"title":{},"body":{"classes/EventResolver.html":{}}}],["results",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/backend-api.html":{}}}],["return",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["round",{"_index":327,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["rounds",{"_index":561,"title":{},"body":{"injectables/PasswordService.html":{}}}],["ru",{"_index":330,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["ru\":\"lamborghini",{"_index":400,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["ru\":\"super",{"_index":340,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["run",{"_index":776,"title":{},"body":{"index.html":{}}}],["running",{"_index":809,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":560,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":545,"title":{},"body":{"injectables/PasswordService.html":{}}}],["same",{"_index":784,"title":{},"body":{"index.html":{}}}],["saving",{"_index":838,"title":{},"body":{"index.html":{}}}],["scaffolding",{"_index":800,"title":{},"body":{"index.html":{}}}],["scalar",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["season",{"_index":414,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["seca",{"_index":343,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["secret",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":449,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":563,"title":{},"body":{"injectables/PasswordService.html":{},"index.html":{}}}],["sent",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["series",{"_index":374,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["serve",{"_index":792,"title":{},"body":{"index.html":{}}}],["server",{"_index":690,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["services/auth.service",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/event.service",{"_index":244,"title":{},"body":{"classes/EventResolver.html":{},"modules/EventsModule.html":{}}}],["services/jwt.strategy",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/media.service",{"_index":493,"title":{},"body":{"classes/MediaResolver.html":{},"modules/MediasModule.html":{}}}],["services/password.service",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":602,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":729,"title":{},"body":{"index.html":{}}}],["shanghai",{"_index":383,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["shareable",{"_index":788,"title":{},"body":{"index.html":{}}}],["showing",{"_index":736,"title":{},"body":{"index.html":{}}}],["signin",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinresponse",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["singleupload",{"_index":480,"title":{},"body":{"classes/MediaResolver.html":{}}}],["singleupload(@args('file",{"_index":498,"title":{},"body":{"classes/MediaResolver.html":{}}}],["singleupload(file",{"_index":489,"title":{},"body":{"classes/MediaResolver.html":{}}}],["skip",{"_index":253,"title":{},"body":{"classes/EventResolver.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"modules/EventsModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"modules/MediasModule.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spa",{"_index":355,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["src",{"_index":306,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{}}}],["stack",{"_index":844,"title":{},"body":{"index.html":{}}}],["start",{"_index":184,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"index.html":{}}}],["started",{"_index":720,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["storage",{"_index":507,"title":{},"body":{"classes/MediaResolver.html":{}}}],["stored",{"_index":804,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":443,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":503,"title":{},"body":{"classes/MediaResolver.html":{}}}],["strecke",{"_index":387,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["strecke...europe",{"_index":386,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"classes/MediaEntity.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":371,"title":{},"body":{"classes/Events1612265244438.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":857,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":742,"title":{},"body":{"index.html":{}}}],["svg",{"_index":858,"title":{},"body":{"modules.html":{}}}],["svs",{"_index":722,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["svs/entities",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"classes/UserEntity.html":{}}}],["svs/mylib",{"_index":790,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t...north",{"_index":372,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["table",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":393,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["take",{"_index":252,"title":{},"body":{"classes/EventResolver.html":{}}}],["teams",{"_index":836,"title":{},"body":{"index.html":{}}}],["test",{"_index":755,"title":{},"body":{"index.html":{}}}],["tests",{"_index":811,"title":{},"body":{"index.html":{}}}],["this.authservice.login(signinpayload",{"_index":134,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.eventservice.find",{"_index":251,"title":{},"body":{"classes/EventResolver.html":{}}}],["this.eventservice.findone(id",{"_index":261,"title":{},"body":{"classes/EventResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mediarepository.find",{"_index":521,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediarepository.findone(id",{"_index":522,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediaservice.find",{"_index":495,"title":{},"body":{"classes/MediaResolver.html":{}}}],["this.mediaservice.findone(id",{"_index":497,"title":{},"body":{"classes/MediaResolver.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":567,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":620,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find(payload",{"_index":285,"title":{},"body":{"injectables/EventService.html":{}}}],["this.userrepository.findone(id",{"_index":286,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findone(user.id",{"_index":607,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(signinpayload.username",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["time",{"_index":404,"title":{},"body":{"classes/Events1612265244438.html":{},"index.html":{}}}],["times",{"_index":834,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":194,"title":{},"body":{"classes/EventEntity.html":{}}}],["title",{"_index":185,"title":{},"body":{"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{}}}],["tools",{"_index":698,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["trofeo",{"_index":337,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["true",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/EventEntity.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["tutorial",{"_index":739,"title":{},"body":{"index.html":{}}}],["type",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/EventResolver.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MediaEntity.html":{},"classes/MediaResolver.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":218,"title":{},"body":{"classes/EventEntity.html":{},"injectables/EventService.html":{},"classes/Events1612265244438.html":{},"classes/MediaEntity.html":{},"injectables/MediaService.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([evententity",{"_index":421,"title":{},"body":{"modules/EventsModule.html":{}}}],["typeormmodule.forfeature([mediaentity",{"_index":543,"title":{},"body":{"modules/MediasModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":639,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":747,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["unauthorizedexception",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["understand",{"_index":820,"title":{},"body":{"index.html":{}}}],["unified",{"_index":852,"title":{},"body":{"index.html":{}}}],["unique",{"_index":583,"title":{},"body":{"classes/UserEntity.html":{}}}],["unit",{"_index":810,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":293,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{},"index.html":{}}}],["up(queryrunner",{"_index":297,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["updated",{"_index":186,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["updatedatecolumn",{"_index":217,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["updatedatecolumn({nullable",{"_index":213,"title":{},"body":{"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{}}}],["uploads",{"_index":510,"title":{},"body":{"classes/MediaResolver.html":{}}}],["use",{"_index":780,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":596,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":605,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/MediaEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["user.id",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.medias",{"_index":475,"title":{},"body":{"classes/MediaEntity.html":{}}}],["user.password",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":61,"title":{"classes/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/MediaEntity.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/Events1612265244438.html":{},"injectables/JwtStrategy.html":{},"classes/Medias1612265095526.html":{}}}],["username",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"classes/Events1612265244438.html":{},"injectables/JwtStrategy.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":271,"title":{},"body":{"injectables/EventService.html":{},"injectables/UserService.html":{}}}],["userresolver",{"_index":588,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":299,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"classes/Users1612206849026.html":{}}}],["users.length",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["users.ts",{"_index":627,"title":{},"body":{"classes/Users1612206849026.html":{},"coverage.html":{}}}],["users.ts:10",{"_index":630,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["users.ts:17",{"_index":629,"title":{},"body":{"classes/Users1612206849026.html":{}}}],["users/entities/user.entity",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/EventEntity.html":{},"classes/MediaEntity.html":{}}}],["users/services/user.service",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users1612206849026",{"_index":625,"title":{"classes/Users1612206849026.html":{}},"body":{"classes/Users1612206849026.html":{},"coverage.html":{}}}],["users[0",{"_index":302,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"injectables/UserService.html":{}}}],["users[0].id",{"_index":303,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{}}}],["userservice",{"_index":141,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":40,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":727,"title":{},"body":{"index.html":{}}}],["validate",{"_index":437,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MediaResolver.html":{}}}],["validate(payload",{"_index":439,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":558,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":324,"title":{},"body":{"classes/Events1612265244438.html":{},"classes/Medias1612265095526.html":{},"classes/Users1612206849026.html":{}}}],["variable",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":861,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":813,"title":{},"body":{"index.html":{}}}],["video",{"_index":735,"title":{},"body":{"index.html":{}}}],["virginia",{"_index":376,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["visit",{"_index":826,"title":{},"body":{"index.html":{}}}],["web",{"_index":764,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["well",{"_index":753,"title":{},"body":{"index.html":{}}}],["whoami",{"_index":590,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":606,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":593,"title":{},"body":{"classes/UserResolver.html":{}}}],["workspace",{"_index":723,"title":{},"body":{"index.html":{}}}],["world",{"_index":407,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["xnjnj",{"_index":916,"title":{},"body":{"additional-documentation/backend-api.html":{}}}],["yeongam",{"_index":368,"title":{},"body":{"classes/Events1612265244438.html":{}}}],["yes",{"_index":242,"title":{},"body":{"classes/EventResolver.html":{},"injectables/EventService.html":{}}}],["zone.js",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/MediasModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            index\n                        \n                        \n                    \n                \n            \n            \n                \nindex()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/app.controller.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n\n  @Get()\n  index() {\n    return { message: 'Welcome to backend/api!' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nMediasModule\n\nMediasModule\n\nAppModule -->\n\nMediasModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        README\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            MediasModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n    \n        Описание модуля app.module.ts\nКак использовать данный модуль\n\n    \n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { environment } from '../environments/environment';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { resolverMap } from './app.resolver';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { EventsModule } from './events/events.module';\nimport { MediasModule } from './media/medias.module';\nimport { UserEntity } from './users/entities/user.entity';\nimport { EventEntity } from './events/entities/event.entity';\nimport { MediaEntity } from './media/entities/media.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...environment.connection,\n      entities: [UserEntity, EventEntity, MediaEntity]\n    }),\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      context: ({ req }) => ({ req }),\n      playground: true,\n      resolvers: [resolverMap]\n    }),\n    UsersModule,\n    AuthModule,\n    EventsModule,\n    MediasModule\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { environment } from '../../environments/environment';\nimport { UsersModule } from '../users/users.module';\nimport { AuthResolver } from './resolvers/auth.resolver';\nimport { AuthService } from './services/auth.service';\nimport { JwtStrategy } from './services/jwt.strategy';\nimport { PasswordService } from './services/password.service';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      privateKey: environment.jwt.secret,\n      signOptions: {\n        expiresIn: environment.jwt.expiresIn\n      }\n    })\n  ],\n  providers: [AuthService, PasswordService, JwtStrategy, AuthResolver],\n  exports: [AuthService, PassportModule]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: SignInPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                                SignInPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\n\nimport type { SignInPayload, SignInResponse } from '@svs/entities';\n\nimport { SignIn } from '../decorators/auth.decorator';\nimport { AuthService } from '../services/auth.service';\n\n@Resolver('Auth')\nexport class AuthResolver {\n  constructor(private readonly authService: AuthService) {}\n\n  @Query('login')\n  async login(@SignIn() signInPayload: SignInPayload): Promise {\n    return await this.authService.login(signInPayload);\n  }\n\n  @Query('logout')\n  async logout(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: SignInPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                                SignInPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { SignInPayload, SignInResponse } from '@svs/entities';\n\nimport { environment } from '../../../environments/environment';\nimport { UserEntity } from '../../users/entities/user.entity';\nimport { UserService } from '../../users/services/user.service';\nimport { PasswordService } from './password.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) {}\n\n  async validateUser(username: string, pass: string): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    const isValid = user ? await this.passwordService.compareHash(pass, user.password) : false;\n\n    if (isValid) {\n      delete user.password;\n\n      return user;\n    }\n\n    return null;\n  }\n\n  async login(signInPayload: SignInPayload): Promise {\n    const user = await this.validateUser(signInPayload.username, signInPayload.password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    const payload = { username: user.username, userId: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      expiresIn: new Date(environment.jwt.expiresIn).getDate(),\n      id: user.id\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventEntity.html":{"url":"classes/EventEntity.html","title":"class - EventEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/events/entities/event.entity.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IEvent\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                created\n                            \n                            \n                                end\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                owner\n                            \n                            \n                                place\n                            \n                            \n                                published\n                            \n                            \n                                start\n                            \n                            \n                                title\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            end\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IMedia\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne('MediaEntity', 'events', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            owner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IUser\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne('UserEntity', 'events')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            place\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            published\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/events/entities/event.entity.ts:49\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\nimport type { IEvent, ILocale, IMedia, IUser } from '@svs/entities';\n\n// import { MediaEntity } from '../../media/entities/media.entity';\n// import { UserEntity } from '../../users/entities/user.entity';\n\n@Entity({\n  name: 'events'\n})\nexport class EventEntity implements IEvent {\n  @Column('simple-json')\n  body: ILocale;\n\n  @CreateDateColumn()\n  created: string;\n\n  @Column({ type: 'timestamp' })\n  end: string;\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(\n    // () => MediaEntity,\n    // media => media.events,\n    'MediaEntity',\n    'events',\n    { nullable: true }\n  )\n  image: IMedia;\n\n  @ManyToOne('UserEntity', 'events')\n  owner: IUser;\n\n  @Column('simple-json', { nullable: true })\n  place: ILocale;\n\n  @Column()\n  published: boolean;\n\n  @Column({ type: 'timestamp' })\n  start: string;\n\n  @Column('simple-json')\n  title: ILocale;\n\n  @UpdateDateColumn({ nullable: true })\n  updated: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventResolver.html":{"url":"classes/EventResolver.html","title":"class - EventResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/events/resolvers/event.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEvent\n                            \n                            \n                                    Async\n                                getEventLAst\n                            \n                            \n                                    Async\n                                getEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventService: EventService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/events/resolvers/event.resolver.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventService\n                                                  \n                                                        \n                                                                        EventService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEvent(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('event')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/events/resolvers/event.resolver.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEventLAst\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventLAst()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('eventLast')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/events/resolvers/event.resolver.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEvents\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEvents(offset?: number, limit?: number, order?: string, excludeFirst?: boolean, excludeLast?: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('events')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/events/resolvers/event.resolver.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    order\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    excludeFirst\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    excludeLast\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Query, Resolver } from '@nestjs/graphql';\n\nimport { IEvent } from '@svs/entities';\n\nimport { EventService } from '../services/event.service';\n\n@Resolver('Event')\nexport class EventResolver {\n  constructor(private readonly eventService: EventService) {}\n\n  @Query('events')\n  async getEvents(\n    @Args('offset') offset?: number,\n    @Args('limit') limit?: number,\n    @Args('order') order?: string,\n    @Args('excludeFirst') excludeFirst?: boolean,\n    @Args('excludeLast') excludeLast?: boolean\n  ): Promise {\n    const result = await this.eventService.find({ take: limit, skip: offset, order: order ? JSON.parse(order) : null });\n\n    let finishResult = excludeFirst ? result.slice(1, result.length) : result;\n    finishResult = excludeLast ? finishResult.slice(0, result.length - 1) : finishResult;\n\n    return finishResult;\n  }\n\n  @Query('event')\n  async getEvent(@Args('id') id: number): Promise {\n    return this.eventService.findOne(id);\n  }\n\n  @Query('eventLast')\n  async getEventLAst(): Promise {\n    const result = await this.eventService.find({ take: 1, skip: 0, order: JSON.parse('{\"id\":\"DESC\"}') });\n\n    return result && result.length ? result[0] : null;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventService.html":{"url":"injectables/EventService.html","title":"injectable - EventService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EventService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/events/services/event.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/events/services/event.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: EntityServiceOptions)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/events/services/event.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            EntityServiceOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, options?: EntityServiceOptions)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/events/services/event.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            EntityServiceOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { EntityServiceOptions, extendOptions } from '@svs/entities';\n\nimport { EventEntity } from '../entities/event.entity';\n\nexport const eventServiceOptions: EntityServiceOptions = {\n  relations: ['image']\n};\n\n@Injectable()\nexport class EventService {\n  constructor(\n    @InjectRepository(EventEntity)\n    private readonly userRepository: Repository\n  ) {}\n\n  async find(options?: EntityServiceOptions): Promise {\n    const payload = extendOptions(eventServiceOptions, options);\n    return await this.userRepository.find(payload);\n  }\n\n  async findOne(id: number, options?: EntityServiceOptions): Promise {\n    const payload = extendOptions(eventServiceOptions, options);\n    return await this.userRepository.findOne(id, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Events1612265244438.html":{"url":"classes/Events1612265244438.html","title":"class - Events1612265244438","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Events1612265244438\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/migrations/1612265244438-Events.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612265244438-Events.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612265244438-Events.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Events1612265244438 implements MigrationInterface {\n\n  public async up(queryRunner: QueryRunner): Promise {\n    const users = await queryRunner.query(`SELECT id FROM users where username = 'admin'`);\n    const userId = users[0] ? users[0].id : 1;\n    const images: any[] = await queryRunner.query(`SELECT * FROM medias where src LIKE 'image-%'`);\n    const imagesIds = images && images.length ? images.map(image => image.id) : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    await queryRunner.query(`\n        INSERT INTO events (body, \"start\", \"end\", published, title, place, \"ownerId\", \"imageId\")\n        VALUES\n        ('{\"en\":\"Competition in the fifth round ... Californian raceway.\", \"ru\": \"Соревнования в пятом туре сезона ... гоночной трассе.\"}',\n        '2019-07-13 00:00:00.000000', '2019-07-14 00:00:00.000000',\n         true, '{\"en\":\"SUPER TROFEO NORTH AMERICA 2019\", \"ru\":\"SUPER TROFEO NORTH AMERICA 2019\"}',\n        '{\"en\":\"ROUND 5: LAGUNA SECA\", \"ru\":\"РАУНД 5: ЛАГУНА СЕКА\"}', ${userId}, ${imagesIds[0]}),\n\n       ('{\"en\":\"A historic appointment ... famous 24 Hours.\", \"ru\": \"Историческое событие для Lamborghini... часами.\"}',\n        '2019-07-26 00:00:00.000000', '2019-07-27 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Europe 2019\", \"ru\":\"Super Trofeo Europe 2019\"}',\n        '{\"en\":\"Round 4: Spa-Francorchamps\", \"ru\":\"Раунд 4: Спа-Франкоршам\"}', ${userId}, ${imagesIds[0]}),\n\n       ('{\"en\":\"Elkhart Lake, ... North America.\", \"ru\": \"Озеро Элкхарт, ... North America.\"}',\n        '2019-08-03 00:00:00.000000', '2019-08-04 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo North america 2019\", \"ru\":\"Super Trofeo North america 2019\"}',\n        '{\"en\":\"Round 3: Американская дорога\", \"ru\":\"Раунд 3: Спа-Франкоршам\"}', ${userId}, ${imagesIds[1]}),\n\n       ('{\"en\":\"Following Inje in 2013... the championship.\", \"ru\": \"После Inje в 2013 ...для четвертого тура чемпионата.\"}',\n        '2019-08-03 00:00:00.000000', '2019-08-04 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Asia 2019\", \"ru\":\"Super Trofeo Asia 2019\"}',\n        '{\"en\":\"Round 4: Yeongam\", \"ru\":\"Раунд 4: Йонам\"}', ${userId}, ${imagesIds[2]}),\n\n       ('{\"en\":\"The Super T...North American series.\", \"ru\": \"Super Trofeo North ... североамериканской серии.\"}',\n        '2019-08-24 00:00:00.000000', '2019-08-25 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo North america 2019\", \"ru\":\"Super Trofeo North america 2019\"}',\n        '{\"en\":\"Round 4: Virginia international raceway\", \"ru\":\"Раунд 4: Международная гоночная трасса Вирджиния\"}',\n        ${userId}, ${imagesIds[3]}),\n\n       ('{\"en\":\"The fifth and ... International Circuit.\", \"ru\": \"Пятый и последний раунд ... трассе Шанхая.\"}',\n        '2019-08-31 00:00:00.000000', '2019-09-01 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Asia 2019\", \"ru\":\"Super Trofeo Asia 2019\"}',\n        '{\"en\":\"Round 5: Shanghai\", \"ru\":\"Раунд 5: Шанхай\"}', ${userId}, ${imagesIds[4]}),\n\n       ('{\"en\":\"The GP Strecke...Europe 2019.\", \"ru\": \"GP Strecke принимает ... Europe 2019.\"}',\n        '2019-08-31 00:00:00.000000', '2019-09-01 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Europe 2019\", \"ru\":\"Super Trofeo Europe 2019\"}',\n        '{\"en\":\"Round 5: Nürburgring\", \"ru\":\"Раунд 5: Нюрбургринг\"}', ${userId}, ${imagesIds[5]}),\n\n       ('{\"en\":\"Competition in the... Californian raceway.\", \"ru\": \"Соревнования в пятом туре ...гоночной трассе.\"}',\n        '2019-09-14 00:00:00.000000', '2019-09-15 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo North America 2019\", \"ru\":\"Super Trofeo North America 2019\"}',\n        '{\"en\":\"Round 5: Laguna Seca\", \"ru\":\"Раунд 5: Лагуна Сека\"}', ${userId}, ${imagesIds[6]}),\n\n       ('{\"en\":\"NO TAGS\",\n       \"ru\": \"БЕЗ ТЕГОВ\"}',\n        '2019-09-19 00:00:00.000000', '2019-09-21 00:00:00.000000', true,\n        '{\"en\":\"Lamborghini & design concorso deleganza\", \"ru\":\"Lamborghini & дизайнерский конкурс элегантности\"}',\n        null, ${userId}, ${imagesIds[7]}),\n\n       ('{\"en\":\"For the first time, ... Final 2019.\",\"ru\": \"Впервые Lamborghini где ...World 2019.\"}',\n        '2019-10-24 00:00:00.000000', '2019-10-25 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo Europe 2019\", \"ru\":\"Super Trofeo Europe 2019\"}',\n        '{\"en\":\"Round 6: Jerez de la Frontera\", \"ru\":\"Раунд 6: Херес де ла Фронтера\"}', ${userId}, ${imagesIds[8]}),\n\n       ('{\"en\":\"The Lamborghini ... event of the season.\", \"ru\": \"Мировой финал события... Lamborghini сезона.\"}',\n        '2019-10-26 00:00:00.000000', '2019-10-27 00:00:00.000000',\n        true, '{\"en\":\"Super Trofeo World Final 2019\", \"ru\":\"Super Trofeo World Final 2019\"}',\n        '{\"en\":\"World final: Jerez de la Frontera\", \"ru\":\"Мировой финал: Херес де ла Фронтера\"}', ${userId},\n        ${imagesIds[8]});\n    `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n        DELETE\n        FROM events\n        WHERE \"imageId\" LIKE 'image-%';\n    `);\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\n\nEventService \n\nEventService \n\n\n\nEventsModule\n\nEventsModule\n\nEventService  -->\n\nEventsModule->EventService \n\n\n\n\n\nEventService\n\nEventService\n\nEventsModule -->\n\nEventService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/events/events.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { EventEntity } from './entities/event.entity';\nimport { EventResolver } from './resolvers/event.resolver';\nimport { EventService } from './services/event.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([EventEntity])],\n  providers: [EventService, EventResolver],\n  exports: [EventService]\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequest\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/guards/gql.auth-guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n\n    return ctx.getContext().req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: environment.jwt.secret\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MediaEntity.html":{"url":"classes/MediaEntity.html","title":"class - MediaEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MediaEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/media/entities/media.entity.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IMedia\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                events\n                            \n                            \n                                id\n                            \n                            \n                                owner\n                            \n                            \n                                published\n                            \n                            \n                                src\n                            \n                            \n                                title\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            events\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IEvent[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany('EventEntity', 'image')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            owner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IUser\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne('UserEntity', 'medias', {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            published\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            src\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ILocale\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('simple-json', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/media/entities/media.entity.ts:66\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn\n} from 'typeorm';\n\nimport type {IEvent, ILocale, IMedia, IUser} from '@svs/entities';\n\n// import {EventEntity} from '../../events/entities/event.entity';\n// import {UserEntity} from '../../users/entities/user.entity';\n\n@Entity({\n  name: 'medias'\n})\nexport class MediaEntity implements IMedia {\n  @CreateDateColumn()\n  created: string;\n\n  @Column('simple-json', {nullable: true})\n  description: ILocale;\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  // @OneToMany(\n  //   () => EventEntity,\n  //   event => event.image\n  // )\n  // events?: IEvent[];\n\n  @OneToMany('EventEntity', 'image')\n  events?: IEvent[];\n\n\n  // @ManyToOne(\n  //   () => UserEntity,\n  //   user => user.medias,\n  //   {\n  //     onDelete: 'CASCADE'\n  //   }\n  // )\n  // owner: IUser;\n\n  @ManyToOne('UserEntity', 'medias',\n    {\n      onDelete: 'CASCADE'\n    }\n  )\n  owner: IUser;\n\n\n  @Column()\n  published: boolean;\n\n  @Column()\n  src: string;\n\n  @Column('simple-json', {nullable: true})\n  title: ILocale;\n\n  @UpdateDateColumn({nullable: true})\n  updated: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MediaResolver.html":{"url":"classes/MediaResolver.html","title":"class - MediaResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MediaResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/media/resolvers/media.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMedia\n                            \n                            \n                                    Async\n                                getMedias\n                            \n                            \n                                    Async\n                                singleUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mediaService: MediaService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/media/resolvers/media.resolver.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMedia\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMedia(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('media')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/media/resolvers/media.resolver.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMedias\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMedias()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('medias')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/media/resolvers/media.resolver.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            singleUpload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    singleUpload(file: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation('singleUpload')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/media/resolvers/media.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\n\nimport { IMedia } from '@svs/entities';\n\nimport { MediaService } from '../services/media.service';\n\n@Resolver('Media')\nexport class MediaResolver {\n  constructor(private readonly mediaService: MediaService) {}\n\n  @Query('medias')\n  async getMedias(): Promise {\n    return this.mediaService.find();\n  }\n\n  @Query('media')\n  async getMedia(@Args('id') id: number): Promise {\n    return this.mediaService.findOne(id);\n  }\n\n  @Mutation('singleUpload')\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async singleUpload(@Args('file') file: any) {\n    const { filename, mimetype, encoding } = await file;\n\n    // 0. add stream to const {} = await file\n\n    // 1. Validate file metadata.\n\n    // 2. Stream file contents into cloud storage:\n    // https://nodejs.org/api/stream.html\n\n    // 3. Record the file uploads in your DB.\n    // const id = await recordFile( … )\n\n    return { filename, mimetype, encoding };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MediaService.html":{"url":"injectables/MediaService.html","title":"injectable - MediaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/media/services/media.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mediaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/media/services/media.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mediaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/media/services/media.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/media/services/media.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { MediaEntity } from '../entities/media.entity';\n\n@Injectable()\nexport class MediaService {\n  constructor(\n    @InjectRepository(MediaEntity)\n    private readonly mediaRepository: Repository\n  ) {}\n\n  async find(): Promise {\n    return await this.mediaRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    return await this.mediaRepository.findOne(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Medias1612265095526.html":{"url":"classes/Medias1612265095526.html","title":"class - Medias1612265095526","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Medias1612265095526\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/migrations/1612265095526-Medias.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612265095526-Medias.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612265095526-Medias.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Medias1612265095526 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    const users = await queryRunner.query(`SELECT id FROM users where username = 'admin'`);\n    const userId = users[0] ? users[0].id : 1;\n    await queryRunner.query(`\n      INSERT INTO medias (published, src, \"ownerId\")\n      VALUES (true, 'image-1.webp', ${userId}), (true, 'image-2.jpg', ${userId}), (true, 'image-3.webp', ${userId}),\n             (true, 'image-4.webp', ${userId}), (true, 'image-5.webp', ${userId}), (true, 'image-6.jpg', ${userId}),\n             (true, 'image-7.webp', ${userId}), (true, 'image-8.jpg', ${userId}), (true, 'image-9.jpg', ${userId}),\n             (true, 'image-10.jpg', ${userId});\n    `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n      DELETE FROM medias WHERE src LIKE 'image-%';\n    `);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MediasModule.html":{"url":"modules/MediasModule.html","title":"module - MediasModule","body":"\n                   \n\n\n\n\n    Modules\n    MediasModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MediasModule\n\n\n\ncluster_MediasModule_exports\n\n\n\ncluster_MediasModule_providers\n\n\n\n\nMediaService \n\nMediaService \n\n\n\nMediasModule\n\nMediasModule\n\nMediaService  -->\n\nMediasModule->MediaService \n\n\n\n\n\nMediaService\n\nMediaService\n\nMediasModule -->\n\nMediaService->MediasModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/media/medias.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MediaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MediaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { MediaEntity } from './entities/media.entity';\nimport { MediaResolver } from './resolvers/media.resolver';\nimport { MediaService } from './services/media.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([MediaEntity])],\n  providers: [MediaService, MediaResolver],\n  exports: [MediaService]\n})\nexport class MediasModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/password.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            compareHash\n                        \n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:25\n                \n            \n\n\n            \n                \n                    Compare plain password with password hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHash\n                        \n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:16\n                \n            \n\n\n            \n                \n                    Return hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            saltRounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:10\n                            \n                        \n\n                \n                    \n                        Salt rounds\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\n\n@Injectable()\nexport class PasswordService {\n  /**\n   * Salt rounds\n   * @see https://github.com/kelektiv/node.bcrypt.js#readme\n   */\n  private saltRounds = 10;\n\n  /**\n   * Return hash\n   * @param password Plain password\n   */\n  getHash(password: string): Promise {\n    return hash(password, this.saltRounds);\n  }\n\n  /**\n   * Compare plain password with password hash\n   * @param password Plain password\n   * @param passwordHash Password hash\n   */\n  compareHash(password: string, passwordHash: string): Promise {\n    return compare(password, passwordHash);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/entities/user.entity.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                events\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                medias\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            events\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IEvent[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany('EventEntity', 'owner')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            medias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IMedia[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany('MediaEntity', 'owner')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 50, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\nimport type {IEvent, IMedia, IUser} from '@svs/entities';\n\n// import { EventEntity } from '../../events/entities/event.entity';\n// import { MediaEntity } from '../../media/entities/media.entity';\n\n@Entity({\n  name: 'users'\n})\nexport class UserEntity implements IUser {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  // @OneToMany(\n  //   () => EventEntity,\n  //   event => event.owner\n  // )\n  // events?: Event[];\n\n  @OneToMany('EventEntity', 'owner')\n  events?: IEvent[];\n\n\n  // @OneToMany(\n  //   () => MediaEntity,\n  //   media => media.owner\n  // )\n  // medias?: IMedia[];\n\n  @OneToMany('MediaEntity', 'owner')\n  medias?: IMedia[];\n\n  @Column()\n  phone: string;\n\n  @Column()\n  password: string;\n\n  @Column({ length: 50, unique: true })\n  username: string;\n\n  @CreateDateColumn()\n  created: string;\n\n  @UpdateDateColumn({ nullable: true })\n  updated: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/resolvers/user.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            whoAmI\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    whoAmI(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport { Query, Resolver } from '@nestjs/graphql';\n\nimport { CurrentUser } from '../decorators/user.decorator';\nimport { UserEntity } from '../entities/user.entity';\nimport { GqlAuthGuard } from '../guards/gql.auth-guard';\nimport { UserService } from '../services/user.service';\n\n@Resolver('User')\nexport class UserResolver {\n  constructor(private readonly userService: UserService) {}\n\n  @Query('user')\n  @UseGuards(GqlAuthGuard)\n  async whoAmI(@CurrentUser() user: UserEntity) {\n    return this.userService.findOne(user.id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/services/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/services/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UserEntity } from '../entities/user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository\n  ) {}\n\n  async find(): Promise {\n    return await this.userRepository.find();\n  }\n\n  async findOneByUsername(username: string): Promise {\n    const users = await this.userRepository.find({ username });\n\n    return users.length === 1 ? users[0] : null;\n  }\n\n  async createUser(user: Partial): Promise {\n    const newUser = await this.userRepository.create(user);\n\n    return this.userRepository.save(newUser);\n  }\n\n  async findOne(id: number): Promise {\n    return (await this.userRepository.findOne(id)) || null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users1612206849026.html":{"url":"classes/Users1612206849026.html","title":"class - Users1612206849026","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users1612206849026\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/migrations/1612206849026-Users.ts\n        \n\n            \n                Description\n            \n            \n                Insert user with\nusername: admin\npassword: 123456\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                down\n                            \n                            \n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612206849026-Users.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1612206849026-Users.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\n/**\n * Insert user with\n * username: admin\n * password: 123456\n */\n\nexport class Users1612206849026 implements MigrationInterface {\n  async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n      INSERT INTO users (username, email, phone, password)\n      VALUES ('admin', 'example@example.com', '9231002233', '$2b$10$A4x21zZO7IKU59ScZNozee7ndO1MXcDXkaZ8h3oTI65D7qRPDatTO');\n    `);\n  }\n\n  async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n      DELETE FROM users WHERE username = 'admin';\n    `);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserEntity } from './entities/user.entity';\nimport { UserResolver } from './resolvers/user.resolver';\nimport { UserService } from './services/user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  providers: [UserService, UserResolver],\n  exports: [UserService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/events/entities/event.entity.ts\n            \n            class\n            EventEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/events/resolvers/event.resolver.ts\n            \n            class\n            EventResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/events/services/event.service.ts\n            \n            injectable\n            EventService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/events/services/event.service.ts\n            \n            variable\n            eventServiceOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/media/entities/media.entity.ts\n            \n            class\n            MediaEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/media/resolvers/media.resolver.ts\n            \n            class\n            MediaResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/media/services/media.service.ts\n            \n            injectable\n            MediaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/backend/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/migrations/1612206849026-Users.ts\n            \n            class\n            Users1612206849026\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/migrations/1612265095526-Medias.ts\n            \n            class\n            Medias1612265095526\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/migrations/1612265244438-Events.ts\n            \n            class\n            Events1612265244438\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^11.0.0\n        \n            @angular/common : ^11.0.0\n        \n            @angular/compiler : ^11.0.0\n        \n            @angular/core : ^11.0.0\n        \n            @angular/forms : ^11.0.0\n        \n            @angular/platform-browser : ^11.0.0\n        \n            @angular/platform-browser-dynamic : ^11.0.0\n        \n            @angular/router : ^11.0.0\n        \n            @nestjs/common : ^7.6.9\n        \n            @nestjs/core : ^7.6.9\n        \n            @nestjs/graphql : ^7.9.8\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.9\n        \n            @nestjs/platform-fastify : ^7.6.9\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @nrwl/angular : 11.2.6\n        \n            apollo-server-express : ^2.19.2\n        \n            apollo-server-fastify : ^3.0.0-alpha.3\n        \n            bcrypt : ^5.0.0\n        \n            fastify-static : ^3.4.0\n        \n            graphql : ^15.5.0\n        \n            graphql-tools : ^7.0.2\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.6.3\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.30\n        \n            zone.js : ^0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    This is not a production server yet!\nThis is only a minimal backend to get started.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSVS workspace\nДокументация backend-api\nBackend-api\nThis project was generated using Nx.\n\n\n🔎 Nx is a set of Extensible Dev Tools for Monorepos.\nQuick Start & Documentation\nNx Documentation\n10-minute video showing all Nx features\nInteractive Tutorial\nAdding capabilities to your workspace\nNx supports many plugins which add capabilities for developing different types of applications and different tools.\nThese capabilities include generating applications, libraries, etc as well as the devtools to test, and build projects as well.\nBelow are our core plugins:\n\nAngular\nng add @nrwl/angular\n\n\nReact\nng add @nrwl/react\n\n\nWeb (no framework frontends)\nng add @nrwl/web\n\n\nNest\nng add @nrwl/nest\n\n\nExpress\nng add @nrwl/express\n\n\nNode\nng add @nrwl/node\n\n\n\nThere are also many community plugins you could add.\nGenerate an application\nRun ng g @nrwl/angular:app my-app to generate an application.\n\nYou can use any of the plugins above to generate applications as well.\n\nWhen using Nx, you can create multiple applications and libraries in the same workspace.\nGenerate a library\nRun ng g @nrwl/angular:lib my-lib to generate a library.\n\nYou can also use any of the plugins above to generate libraries as well.\n\nLibraries are shareable across libraries and applications. They can be imported from @svs/mylib.\nDevelopment server\nRun ng serve my-app for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng g component my-component --project=my-app to generate a new component.\nBuild\nRun ng build my-app to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test my-app to execute the unit tests via Jest.\nRun nx affected:test to execute the unit tests affected by a change.\nRunning end-to-end tests\nRun ng e2e my-app to execute the end-to-end tests via Cypress.\nRun nx affected:e2e to execute the end-to-end tests affected by a change.\nUnderstand your workspace\nRun nx dep-graph to see a diagram of the dependencies of your projects.\nFurther help\nVisit the Nx Documentation to learn more.\n☁ Nx Cloud\nComputation Memoization in the Cloud\n\n\nNx Cloud pairs with Nx in order to enable you to build and test code more rapidly, by up to 10 times. Even teams that are new to Nx can connect to Nx Cloud and start saving time instantly.\nTeams using Nx gain the advantage of building full-stack applications with their preferred framework alongside Nx’s advanced code generation and project dependency graph, plus a unified experience for both frontend and backend developers.\nVisit Nx Cloud to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MediasModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_MediasModule\n\n\n\ncluster_MediasModule_exports\n\n\n\ncluster_MediasModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nEventService \n\nEventService \n\nEventService  -->\n\nEventsModule->EventService \n\n\n\n\n\nMediasModule\n\nMediasModule\n\nAppModule -->\n\nMediasModule->AppModule\n\n\n\n\n\nMediaService \n\nMediaService \n\nMediaService  -->\n\nMediasModule->MediaService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nEventService\n\nEventService\n\nEventsModule -->\n\nEventService->EventsModule\n\n\n\n\n\nMediaService\n\nMediaService\n\nMediasModule -->\n\nMediaService->MediasModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            eventServiceOptions   (apps/.../event.service.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/app/users/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CurrentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  return ctx;\n})\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true,\n  jwt: {\n    secret: 'MyJWTSecret',\n    expiresIn: 15000000\n  },\n  connection: {\n    type: null,\n    host: null,\n    port: null,\n    username: null,\n    password: null,\n    database: null,\n    synchronize: false\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n  jwt: {\n    secret: 'MyJWTSecret',\n    expiresIn: 15000000\n  },\n  connection: {\n    type: 'postgres' as 'aurora-data-api',\n    host: 'localhost',\n    port: 5433,\n    username: 'postgres',\n    password: '123456',\n    database: 'SVS',\n    dropSchema: false,\n    synchronize: true,\n    logging: true,\n    entities: [\n      \"dist/apps/backend/api/src/**/*.entity{.ts, .js}\"\n    ],\n    migrations: [\n      \"dist/apps/backend/api/migrations/*{.ts, .js}\"\n    ],\n    cli: {\n      \"migrationsDir\": \"db/migrations\"\n    }\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/app/events/services/event.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            eventServiceOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EntityServiceOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  relations: ['image']\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/app/app.resolver.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            resolverMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    parseValue(value: string) {\n      return new Date(value); // value from the client\n    },\n    serialize(value: Date) {\n      return value.toISOString(); // value sent to the client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.STRING) {\n        return new Date(ast.value); // ast value is always in string format\n      }\n      return null;\n    }\n  }),\n  JSON: GraphQLJSON\n}\n                        \n                    \n\n\n            \n        \n\n    apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SignIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  const args = ctx.getArgs()[1];\n\n  return { username: args.username, password: args.password };\n})\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/backend-api.html":{"url":"additional-documentation/backend-api.html","title":"additional-page - Backend-API","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nпроверка стартовой страницы\nxnjnj nfsdlsbnj;asdbnj;bs\n\ngfdfhfjdjd\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
